{"meta":{"title":"Blog","subtitle":null,"description":"Personal Technology Blog","author":"Mark","url":"https://js-mark.com","root":"/"},"pages":[{},{},{},{},{}],"posts":[{"title":"一文彻底弄懂 \"Event Loop\"","date":"2020-06-14T14:34:38.000Z","path":"前端面试/一文彻底弄懂-EventLoop/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>什么是 <code>Event Loop</code> 事件循环机制？有什么作用？为什么面试经常问到？？？我在学习浏览器和NodeJS的Event Loop时翻阅了技术类型网站上大量的文章，这些文章写的都很不错、讲解的也很到位，那为什么我还是要写这篇文章呢？其实呢是由于这些文章都是针对特定的一些案例、一些情况来解释 <code>Event Loop</code>，当很多篇文章凑在一起综合来看，才可以对这些概念有较为深入的理解。<br>于是，我在看了大量文章之后，想要写这么一篇博客，不采用官方的描述，结合自己的理解以及示例代码，用最通俗的语言表达出来。希望大家可以通过这篇文章，了解到Event Loop到底是一种什么机制，浏览器和NodeJS的Event Loop又有什么区别。如果在文中出现书写错误的地方，欢迎大家留言一起探讨。(PS: 其实是很多篇文章组合在一起后才理解了这些。。。如果对你有用，就请给个Star吧~ 如有错误，欢迎指出~)</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Event-Loop-是什么？\"><a href=\"#Event-Loop-是什么？\" class=\"headerlink\" title=\"Event Loop 是什么？\"></a><code>Event Loop</code> 是什么？</h2><blockquote>\n<p><code>Event Loop</code> 是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的 <code>Event Loop</code>。</p>\n</blockquote>\n<ul>\n<li>浏览器的 <code>Event Loop</code> 是在html5的规范中明确定义。</li>\n<li>NodeJS的 <code>Event Loop</code> 是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。</li>\n<li>为了解决JS <code>多线程</code> 高效运行，衍生出了主线程和任务队列（同步任务和异步任务），主线程一直在循环运行任务，当执到异步任务的时候，不等待它执行完，而是把异步任务放入到队列中，当所有的同步任务都执行完毕之后，任务队列就会通知主线程执行队列中的任务。之后再重复之前的步骤，就变成了一个循环，也就是我们说的 <code>Event Loop</code> 事件循环机制。</li>\n</ul>\n<h3 id=\"浏览器线程\"><a href=\"#浏览器线程\" class=\"headerlink\" title=\"浏览器线程\"></a>浏览器线程</h3><blockquote>\n<p>我们常说 JS 是单线程语言，但是别忘了常见的浏览器内核可都是多线程的，多个线程间会进行不断通讯，通常会有如下几个线程：</p>\n</blockquote>\n<ul>\n<li>GUI 渲染进程</li>\n<li>JS 引擎线程</li>\n<li>定时器线程</li>\n<li>事件触发线程</li>\n<li>异步 HTTP 请求线程</li>\n</ul>\n<p><img data-src=\"1621f4d1b953533d.png\" alt=\"JS EventLoop\"></p>\n<ul>\n<li>请认真阅读以下代码，并尝试输出？</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;timeout1&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;start&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise1&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise2&#x27;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise3&#x27;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;timeout2&#x27;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;done&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Microtask-与-Macrotask（宏队列和微队列）\"><a href=\"#Microtask-与-Macrotask（宏队列和微队列）\" class=\"headerlink\" title=\"Microtask 与 Macrotask（宏队列和微队列）\"></a>Microtask 与 Macrotask（宏队列和微队列）</h3><blockquote>\n<p>在大多数解释 JS Event Loop 的文章中，鲜有谈及 Miscrotask 和 Macrotask 这两个概念，但这两个概念却是非常的重要，我在翻阅 Zone.js Primer  时，里面就经常会提及这两个概念，当时也是看的云里雾里的，这也是我写这篇文章的原因之一。<br>Macrotask（宏队列），也叫tasks。 一些异步任务的回调会依次进入macro task queue（宏任务队列），等待后续被调用，这些异步任务包括：</p>\n</blockquote>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate (Node独有)</li>\n<li>requestAnimationFrame (浏览器独有)</li>\n<li>I/O</li>\n<li>UI rendering (浏览器独有)</li>\n</ul>\n<blockquote>\n<p>Microtask（微队列），也叫jobs。 另一些异步任务的回调会依次进入micro task queue（微任务队列），等待后续被调用，这些异步任务包括：</p>\n</blockquote>\n<ul>\n<li><p>process.nextTick (Node独有)</p>\n</li>\n<li><p>Promise</p>\n</li>\n<li><p>Object.observe</p>\n</li>\n<li><p>MutationObserver</p>\n</li>\n<li><p>（注：这里只针对浏览器和NodeJS）</p>\n</li>\n<li><p>setTimeout(fn,0),会执行一个异步操作，会放到异步队列中，并在同步任务执行完毕后，尽早执行！</p>\n</li>\n</ul>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWEzMzMyYjUxODgyNTU1N2MwMTE4OTY=\">彻底理解 JS Event Loop（浏览器环境）<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTQvMTAvZXZlbnQtbG9vcC5odG1s\">JavaScript 运行机制详解：再谈Event Loop<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9FdmVudExvb3A=\">并发模型与事件循环–MDN<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmZ1bmRlYnVnLmNvbS8yMDE5LzAxLzE1L2RpZmZyZW5jZXMtb2YtYnJvd3Nlci1hbmQtbm9kZS1pbi1ldmVudC1sb29wLw==\">浏览器与Node的事件循环(Event Loop)有何区别?<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYWtlYXJjaGliYWxkLmNvbS8yMDE1L3Rhc2tzLW1pY3JvdGFza3MtcXVldWVzLWFuZC1zY2hlZHVsZXMv\">Tasks, microtasks, queues and schedules<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI2V2ZW50LWxvb3A=\">HTLM5 EVENT LOOP DEFINITIONS<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2RvY3MvZ3VpZGVzL2V2ZW50LWxvb3AtdGltZXJzLWFuZC1uZXh0dGljay8jd2hhdC1pcy10aGUtZXZlbnQtbG9vcA==\">Node.js 事件循环<i class=\"fa fa-external-link-alt\"></i></span></p>\n","updated":"2021-04-27T15:09:32.093Z","comments":true,"link":"","permalink":"https://js-mark.com/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E4%B8%80%E6%96%87%E5%BD%BB%E5%BA%95%E5%BC%84%E6%87%82-EventLoop/","categories":[{"name":"前端面试","slug":"前端面试","permalink":"https://js-mark.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"面试题","slug":"面试题","permalink":"https://js-mark.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"name":"Javascript","slug":"Javascript","permalink":"https://js-mark.com/tags/Javascript/"}]},{"title":"sourceTree 使用rebase操作","date":"2020-06-12T18:47:03.000Z","path":"多人协作开发/sourceTree-使用rebase操作/","content":"<p><code>git merge</code> vs <code>git rebase</code></p>\n<span id=\"more\"></span>\n\n<h2 id=\"我们先来做个简单的对比吧\"><a href=\"#我们先来做个简单的对比吧\" class=\"headerlink\" title=\"我们先来做个简单的对比吧\"></a>我们先来做个简单的对比吧</h2><ul>\n<li><p>原始状态<br><img data-src=\"006tNbRwgy1fy69b0529uj30sy0pg41h.jpg\"></p>\n</li>\n<li><p>使用<code>git merge</code>操作，产生的路径图<br><img data-src=\"1.png\"></p>\n</li>\n<li><p>使用<code>git rebase</code>操作，产生的路径图<br><img data-src=\"006tNbRwgy1fy69dtpcenj30zk0fstbx.jpg\"></p>\n</li>\n</ul>\n<h2 id=\"使用git-rebase操作\"><a href=\"#使用git-rebase操作\" class=\"headerlink\" title=\"使用git rebase操作\"></a>使用<code>git rebase</code>操作</h2><ul>\n<li><p>完成功能分支之后先不 merge，而是 <code>git checkout 主分支</code> 回到主干分支去 <code>git pull --rebase</code></p>\n</li>\n<li><p>如果主干有更新，<code>git rebase 分支</code> 更新主分支的内容到功能分支来预检一下，看看在加入了最近别人的改动之后我的功能是否依然 OK（在这个过程中可能会有冲突处理，解决冲突之后使用 <code>git add .</code> 更新索引，更新完之后不需要执行 commit，只要执行 <code>git rebase --continue</code> 应用余下的补丁即可）</p>\n</li>\n<li><p>一切就绪之后再次 <code>git fetch</code> 主干看看有没有变动（因为在第二步的进行期间没准又有人 push 了新的变化），有的话重复第二部</p>\n</li>\n<li><p>合并功能分支到主干然后 push，收工。</p>\n</li>\n<li><p>用 git 整合分支的时候，大家更常用的是变基操作 (git rebase) 还是合并操作 (git merge)，你们觉得哪个比较好？</p>\n</li>\n<li><p>在 sourceTree 中使用 rebase （变基）,使用 rebase 命令保持主分支树的整洁</p>\n</li>\n<li><p>git 的 GUI 工具 Sourcetree 使用及命令行对比</p>\n</li>\n<li><p>假如我们要在 master 分支上进行开发，在远端的 master 分支上右键，检出 一个自己的开发分支 dev-1<br><img data-src=\"006tNbRwgy1fy69bjs148j30t20v2ae7.jpg\"><br><img data-src=\"006tNbRwgy1fy69c5ndkcj30u40r2diy.jpg\"></p>\n</li>\n<li><p>做一些开发，提交到本地，不要推送（push）到远端,切换到 master 分支，拉取远端的 master 更新，（这里另一个同事在 master 分支上提交了 dev 2 的更新）<br><img data-src=\"006tNbRwgy1fy69cyad02j30zk0ec0xz.jpg\"></p>\n</li>\n<li><p>切换到自己的开发分支 dev-1，选中 master 分支，右键，选择 将当前变更变基到 master<br><img data-src=\"006tNbRwgy1fy69daffwqj30ta0mm0wn.jpg\"></p>\n</li>\n<li><p>如果有冲突则合并冲突，点击左上角的加号，选择 继续变基<br><img data-src=\"006tNbRwgy1fy69dg5ei0j30zk0g4434.jpg\"></p>\n</li>\n<li><p>此时我们的本地更新是基于最新的 master 分支<br><img data-src=\"006tNbRwgy1fy69dkjpc8j30uo0h20vf.jpg\"></p>\n</li>\n<li><p>最后’推送’我们的开发分支 dev-1 到远端,切换到 master 分支，点击 拉取，拉取 dev-1 的更新到 master 分支<br><img data-src=\"006tNbRwgy1fy69doxd6zj30ym0h00vp.png\"></p>\n</li>\n<li><p>再推送 master 分支，就保证了 git 分支的整洁<br><img data-src=\"006tNbRwgy1fy69dtpcenj30zk0fstbx.jpg\"></p>\n</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mN2VkM2RkMGQyZDg=\">Git rebase使用<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwOTA2Nzk4NA==\">团队开发Git分支管理策略<i class=\"fa fa-external-link-alt\"></i></span></p>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91/sourceTree-%E4%BD%BF%E7%94%A8rebase%E6%93%8D%E4%BD%9C/","categories":[{"name":"多人协作开发","slug":"多人协作开发","permalink":"https://js-mark.com/categories/%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"git 多人协作开发","slug":"git-多人协作开发","permalink":"https://js-mark.com/tags/git-%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91/"},{"name":"git","slug":"git","permalink":"https://js-mark.com/tags/git/"}]},{"title":"前端面试题整理","date":"2020-04-17T14:34:38.000Z","path":"前端面试/前端面试题整理/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>本人并不是技术大牛(但是会一直朝着那个方向前进)，本文会分享一些本人在面试过程中遇到的一些比较有意思的前端面试题目，如有不对之处还请各位巨牛批评指正！</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h3><h4 id=\"Q-使用promise封装一个readfile函数-？\"><a href=\"#Q-使用promise封装一个readfile函数-？\" class=\"headerlink\" title=\"Q: 使用promise封装一个readfile函数 ？\"></a>Q: 使用promise封装一个readfile函数 ？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pReadFile</span>(<span class=\"params\">filePath</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">  fs.readFile(filePath,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      resolve(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pReadFile(<span class=\"string\">&#x27;./data/a.txt&#x27;</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">&#x27;./data/b.txt&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">&#x27;./data/c.txt&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q：去除连续重复字符串？例：abcdaaabcd-输出abcdabcd-？\"><a href=\"#Q：去除连续重复字符串？例：abcdaaabcd-输出abcdabcd-？\" class=\"headerlink\" title=\"Q：去除连续重复字符串？例：abcdaaabcd 输出abcdabcd ？\"></a>Q：去除连续重复字符串？例：abcdaaabcd 输出abcdabcd ？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">str_</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (str != <span class=\"string\">&#x27;&#x27;</span>) &#123;</span><br><span class=\"line\">    result = str[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str[i] != str[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        result += str[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-正则将电话号码中间四位变成-号-？\"><a href=\"#Q-正则将电话号码中间四位变成-号-？\" class=\"headerlink\" title=\"Q: 正则将电话号码中间四位变成#号 ？\"></a>Q: 正则将电话号码中间四位变成#号 ？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式 1： 正则分组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> phone = <span class=\"string\">&quot;18180800880&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/(\\d&#123;3&#125;)\\d&#123;4&#125;(\\d&#123;4&#125;)/</span></span><br><span class=\"line\">phone.replace(reg,<span class=\"string\">&quot;$1****$2&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 181****0880</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式 2：字符串截取</span></span><br><span class=\"line\">phone.substr(<span class=\"number\">0</span>,<span class=\"number\">3</span>) + <span class=\"string\">&quot;****&quot;</span> + phone.substr(<span class=\"number\">7</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-查看下列代码运行结果-？\"><a href=\"#Q-查看下列代码运行结果-？\" class=\"headerlink\" title=\"Q: 查看下列代码运行结果 ？\"></a>Q: 查看下列代码运行结果 ？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;222&#x27;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;333&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行try块中代码，然后执行宏任务代码，</span></span><br><span class=\"line\"><span class=\"comment\">// 将异步任务放到队列中，当宏任务队列执行时抛出异常，但是不会走到catch中</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-写出下列代码运行打印结果-？\"><a href=\"#Q-写出下列代码运行打印结果-？\" class=\"headerlink\" title=\"Q: 写出下列代码运行打印结果 ？\"></a>Q: 写出下列代码运行打印结果 ？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  foo = <span class=\"number\">10</span>  <span class=\"comment\">// 由于foo在函数中只为可读，因此赋值无效</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(foo)</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-数组拆解-flat-1-a-1-3-–-gt-1-a-1-3-？\"><a href=\"#Q-数组拆解-flat-1-a-1-3-–-gt-1-a-1-3-？\" class=\"headerlink\" title=\"Q: 数组拆解: flat: [1,[{a:1},3]] –&gt; [1, {a: 1}, 3] ？\"></a>Q: 数组拆解: flat: [1,[{a:1},3]] –&gt; [1, {a: 1}, 3] ？</h4><ul>\n<li>方式 1，缺陷如果元素是对象会报错</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.flat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.toString().split(<span class=\"string\">&#x27;,&#x27;</span>).map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> +item )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式 2，es6数组新扩展，参数是维度，可填写无穷大</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>]].flat(<span class=\"number\">1</span>) ==&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式 3，reduce 和 concat</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,&#123;<span class=\"attr\">sas</span>: <span class=\"string\">&#x27;222&#x27;</span>&#125;,<span class=\"number\">3</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>, [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenDeep</span>(<span class=\"params\">arr1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr1.reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> <span class=\"built_in\">Array</span>.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">flattenDeep(arr1);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-写一个函数输出：-‘a’-‘b’-‘c’-‘d’-gt-a-b-c-‘d’-？\"><a href=\"#Q-写一个函数输出：-‘a’-‘b’-‘c’-‘d’-gt-a-b-c-‘d’-？\" class=\"headerlink\" title=\"Q: 写一个函数输出： [‘a’, ‘b’, ‘c’, ‘d’] =&gt; { a: { b: { c: ‘d’ } } } ？\"></a>Q: 写一个函数输出： [‘a’, ‘b’, ‘c’, ‘d’] =&gt; { a: { b: { c: ‘d’ } } } ？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">to_</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _arr = arr.reverse()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(_arr)) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _arr.reduce(<span class=\"function\">(<span class=\"params\">item, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      item = &#123;</span><br><span class=\"line\">        [arr[index + <span class=\"number\">1</span>]]: cur</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> item</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">    item = &#123; [cur]: item &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">  &#125;, &#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-封装一个Array-filter方法-？\"><a href=\"#Q-封装一个Array-filter方法-？\" class=\"headerlink\" title=\"Q: 封装一个Array.filter方法 ？\"></a>Q: 封装一个Array.filter方法 ？</h4><ul>\n<li>1.使用Array.reduce方法封装，还有其他方法，希望大家帮忙补充！</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Filter</span>(<span class=\"params\">arr, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">item, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback(cur, index, arr)) item.push(cur)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-什么是防抖和节流？有什么区别？如何实现-？\"><a href=\"#Q-什么是防抖和节流？有什么区别？如何实现-？\" class=\"headerlink\" title=\"Q: 什么是防抖和节流？有什么区别？如何实现 ？\"></a>Q: 什么是防抖和节流？有什么区别？如何实现 ？</h4><ul>\n<li>防抖</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</span></span><br><span class=\"line\"><span class=\"comment\">// 思路：每次触发事件时都取消之前的延时调用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>; <span class=\"comment\">// 创建一个标记用来存放定时器的返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout); <span class=\"comment\">// 每当用户输入的时候把前一个 setTimeout clear 掉</span></span><br><span class=\"line\">    timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span></span><br><span class=\"line\">      fn.apply(<span class=\"built_in\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;防抖成功&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;inp&#x27;</span>);</span><br><span class=\"line\">inp.addEventListener(<span class=\"string\">&#x27;input&#x27;</span>, debounce(sayHi)); <span class=\"comment\">// 防抖</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>节流</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</span></span><br><span class=\"line\"><span class=\"comment\">// 思路：每次触发事件时都判断当前是否有等待执行的延时函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> canRun = <span class=\"literal\">true</span>; <span class=\"comment\">// 通过闭包保存一个标记</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!canRun) <span class=\"keyword\">return</span>; <span class=\"comment\">// 在函数开头判断标记是否为true，不为true则return</span></span><br><span class=\"line\">    canRun = <span class=\"literal\">false</span>; <span class=\"comment\">// 立即设置为false</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 将外部传入的函数的执行放在setTimeout中</span></span><br><span class=\"line\">      fn.apply(<span class=\"built_in\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span></span><br><span class=\"line\">      canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.target.innerWidth, e.target.innerHeight);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&#x27;resize&#x27;</span>, throttle(sayHi));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-创建一个从1——5数组-？\"><a href=\"#Q-创建一个从1——5数组-？\" class=\"headerlink\" title=\"Q: 创建一个从1——5数组 ？\"></a>Q: 创建一个从1——5数组 ？</h4><ul>\n<li>字面量</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.from(<span class=\"string\">&#x27;12345&#x27;</span>).map(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span> <span class=\"built_in\">Number</span>(e))</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>).map(<span class=\"function\">(<span class=\"params\">e,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [...Array(<span class=\"number\">5</span>)].map(<span class=\"function\">(<span class=\"params\">e,i</span>)=&gt;</span> i+ <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"string\">&#x27;12345&#x27;</span>.split(<span class=\"string\">&#x27;&#x27;</span>).map(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span> <span class=\"built_in\">Number</span>(e))</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>).fill(<span class=\"number\">0</span>).map(<span class=\"function\">(<span class=\"params\">e,i</span>)=&gt;</span> i+ <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Array</span>(<span class=\"number\">5</span>))</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">e,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  arr.fill(i + <span class=\"number\">1</span>,i, i + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-给定一个整数数组-nums-和一个目标值-target-，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标-？\"><a href=\"#Q-给定一个整数数组-nums-和一个目标值-target-，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标-？\" class=\"headerlink\" title=\"Q: 给定一个整数数组 nums 和一个目标值 target ，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标 ？\"></a>Q: 给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code> ，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标 ？</h4><ul>\n<li>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给定 nums = [2, 7, 11, 15], target = 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为 nums[0] + nums[1] = 2 + 7 = 9</span></span><br><span class=\"line\"><span class=\"comment\">// 所以返回 [0, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一种</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nums = [<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">      target = <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSumIndex</span>(<span class=\"params\">arr1, sum</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; arr1.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> j = arr1.slice(i + <span class=\"number\">1</span>).findIndex(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> arr1[i] + item === sum);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log([i, i + <span class=\"number\">1</span> + j]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [i, i + <span class=\"number\">1</span> + j];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;[]&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getSumIndex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = target-nums[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(k)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [map.get(k), i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.set(nums[i], i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">getSumIndex(nums, target);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>附leetcode地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bS9zb2x1dGlvbi9xaWFuLWR1YW4tamluLWppZS1zdWFuLWZhLWxpYW5nLXNodS16aGktaGUtYnktdXNlci8=\">leetcode<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h4 id=\"Q-4-3-2-7-8-2-3-1-2-3-4-5-3-8-gt-2-3-4-8-？\"><a href=\"#Q-4-3-2-7-8-2-3-1-2-3-4-5-3-8-gt-2-3-4-8-？\" class=\"headerlink\" title=\"Q: [4,3,2,7,8,2,3,1,2,3,4,5,3,8] ==&gt;  [2,3,4,8] ？\"></a>Q: [4,3,2,7,8,2,3,1,2,3,4,5,3,8] ==&gt;  [2,3,4,8] ？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handlerData</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.isArray(arr)) <span class=\"keyword\">return</span> []</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">item,cur</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj[cur]) &#123;</span><br><span class=\"line\">      obj[cur] += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"comment\">// 其实这两还可以使用new Set</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!item.includes(cur)) &#123;</span><br><span class=\"line\">      \titem.push(cur)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t  obj[cur] = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item</span><br><span class=\"line\">  &#125;,[])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-let、const、var区别\"><a href=\"#Q-let、const、var区别\" class=\"headerlink\" title=\"Q: let、const、var区别 ?\"></a>Q: let、const、var区别 ?</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查看下列输出</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> d = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);  <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);  <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-实现一个new、bind、apply、call方法\"><a href=\"#Q-实现一个new、bind、apply、call方法\" class=\"headerlink\" title=\"Q: 实现一个new、bind、apply、call方法 ?\"></a>Q: 实现一个new、bind、apply、call方法 ?</h4><ul>\n<li>实现new关键字</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一种</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newObj</span>(<span class=\"params\">Obj, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObj = <span class=\"built_in\">Object</span>.create(&#123;&#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 将传入的构造函数原型赋值给新创建的对象的原型链上</span></span><br><span class=\"line\">  newObj.__proto__ = Obj.prototype</span><br><span class=\"line\">  <span class=\"comment\">// 改变this指向</span></span><br><span class=\"line\">  Obj.apply(newObj, args)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">objectFactory</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(),</span><br><span class=\"line\">  <span class=\"comment\">// 获取传入参数第一个为要new的构造函数</span></span><br><span class=\"line\">  Constructor = [].shift.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  obj.__proto__ = Constructor.prototype;</span><br><span class=\"line\">  <span class=\"comment\">// this转向</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ret = Constructor.apply(obj, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> ret === <span class=\"string\">&#x27;object&#x27;</span> ? ret : obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实现call和apply方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.call_ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = args[<span class=\"number\">0</span>] || <span class=\"built_in\">window</span></span><br><span class=\"line\">  context.fn = <span class=\"built_in\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args_ = args.length &gt; <span class=\"number\">1</span> ? args.splice(<span class=\"number\">1</span>) : args</span><br><span class=\"line\">  context.fn(...args_)</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// apply</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.apply_ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> context = args[<span class=\"number\">0</span>] || <span class=\"built_in\">window</span></span><br><span class=\"line\">  context.fn = <span class=\"built_in\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args_ = args.length &gt; <span class=\"number\">1</span> ? args.splice(<span class=\"number\">1</span>) : args</span><br><span class=\"line\">  context.fn(args_)</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实现bind方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> self = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args_</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.prototype = self.prototype;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.apply(<span class=\"built_in\">this</span>, args.concat(args_));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-实现一下-element-js\"><a href=\"#Q-实现一下-element-js\" class=\"headerlink\" title=\"Q: 实现一下 element.js ?\"></a>Q: 实现一下 element.js ?</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> el = <span class=\"keyword\">new</span> <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./element.js&#x27;</span>)；</span><br><span class=\"line\"><span class=\"keyword\">const</span> ul = el(<span class=\"string\">&#x27;ul&#x27;</span>, &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;list&#x27;</span>&#125;, [</span><br><span class=\"line\">  el(<span class=\"string\">&#x27;li&#x27;</span>, &#123;<span class=\"attr\">class</span>: <span class=\"string\">&#x27;item&#x27;</span>&#125;, [<span class=\"string\">&#x27;Item 1&#x27;</span>]),</span><br><span class=\"line\">  el(<span class=\"string\">&#x27;li&#x27;</span>, &#123;<span class=\"attr\">class</span>: <span class=\"string\">&#x27;item&#x27;</span>&#125;, [<span class=\"string\">&#x27;Item 2&#x27;</span>]),</span><br><span class=\"line\">  el(<span class=\"string\">&#x27;li&#x27;</span>, &#123;<span class=\"attr\">class</span>: <span class=\"string\">&#x27;item&#x27;</span>&#125;, [<span class=\"string\">&#x27;Item 3&#x27;</span>])</span><br><span class=\"line\">])</span><br><span class=\"line\"><span class=\"keyword\">const</span> ulRoot = ul.render();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(ulRoot);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dom输出：</span></span><br><span class=\"line\">&lt;ul id=<span class=\"string\">&#x27;list&#x27;</span>&gt;</span><br><span class=\"line\">  &lt;li <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&#x27;item&#x27;</span>&gt;Item <span class=\"number\">1</span>&lt;/li&gt;</span><br><span class=\"line\">  &lt;li <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&#x27;item&#x27;</span>&gt;Item <span class=\"number\">2</span>&lt;/li&gt;</span><br><span class=\"line\">  &lt;li <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&#x27;item&#x27;</span>&gt;Item <span class=\"number\">3</span>&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现方案</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">El</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">el, attr, children</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.data = <span class=\"built_in\">this</span>.handlerData(&#123; el, attr, children &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  * 创建VDom元素</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.createdElement(<span class=\"built_in\">this</span>.data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">createdElement</span>(<span class=\"params\">&#123; el, attr, children &#125;</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = <span class=\"built_in\">document</span>.createElement(el)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> attr === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"built_in\">Object</span>.keys(attr).length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(attr)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key) &#123;</span><br><span class=\"line\">          node[key] = <span class=\"built_in\">this</span>.handlerAttr(node, key, attr[key])[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(children)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> children) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> item === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">          node.appendChild(<span class=\"built_in\">this</span>.createdElement(item.data))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> textNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;span&#x27;</span>)</span><br><span class=\"line\">          textNode.innerHTML = item</span><br><span class=\"line\">          node.appendChild(textNode)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">handlerAttr</span>(<span class=\"params\">node, key, value</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">style</span>(<span class=\"params\">value_</span>)</span> &#123;</span><br><span class=\"line\">        node.style = value_</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">class</span>(<span class=\"params\">value_</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value_ === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">          node.classList.add(value_)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 直接赋值操作</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">miss</span>(<span class=\"params\">value_</span>)</span> &#123;</span><br><span class=\"line\">        node[key] = value_</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj[key] ? obj[key](value) : obj[<span class=\"string\">&#x27;miss&#x27;</span>](value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">handlerData</span>(<span class=\"params\">&#123; el, attr, children &#125;</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      el, attr, children</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-请写出格式化以下字符串的函数？\"><a href=\"#Q-请写出格式化以下字符串的函数？\" class=\"headerlink\" title=\"Q: 请写出格式化以下字符串的函数？\"></a>Q: 请写出格式化以下字符串的函数？</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将字符串&quot;I&#x27;m?$$$driving$??$to$?beijing$?$$after$breakfast&quot;格式化为&quot;I&#x27;m driving to Beijing after breakfast&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 1.我们需要的内容只有大小写英文字母和“&#x27;”这个单引号</span></span><br><span class=\"line\"><span class=\"comment\">// 2.假如乱码特殊字符的最后一位是=== &quot;?&quot;，则他的下一位如果是字母肯定为大写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(str).reduce(<span class=\"function\">(<span class=\"params\">item,cur,_index,arr</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur === <span class=\"string\">&#x27;$&#x27;</span> &amp;&amp; arr[_index + <span class=\"number\">1</span>] === <span class=\"string\">&#x27;?&#x27;</span> &amp;&amp; <span class=\"regexp\">/[A-Za-z]/g</span>.test(arr[_index + <span class=\"number\">2</span>])) &#123;</span><br><span class=\"line\">      index = _index + <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur === <span class=\"string\">&#x27;$&#x27;</span> || cur === <span class=\"string\">&#x27;?&#x27;</span>) &#123;</span><br><span class=\"line\">      item += <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( index === _index) &#123;</span><br><span class=\"line\">        item += cur.toUpperCase()</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        item += cur</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item.replace(<span class=\"regexp\">/(\\s)+/g</span>,<span class=\"string\">&#x27;$1&#x27;</span>) <span class=\"comment\">// 替换重复空格</span></span><br><span class=\"line\">  &#125;,<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-实现一下-on-off-emit-？\"><a href=\"#Q-实现一下-on-off-emit-？\" class=\"headerlink\" title=\"Q: 实现一下$on/$off/$emit ？\"></a>Q: 实现一下$on/$off/$emit ？</h4><ul>\n<li>就是让我们实现下vue的订阅者模式，其实双向绑定也是这样实现的！</li>\n<li>这三个函数主要依赖的是一个大的依赖收集器来做的！（PS：具体实现请看下边！）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dep</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 因为订阅者有n个并且实现逻辑都不一样，所以采用对象数组形式</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.events = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getType</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不区分大小写</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> str = <span class=\"built_in\">Object</span>.prototype.toString.call(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/^\\[Object ?(.*)\\]$/i</span>.exec(str)[<span class=\"number\">1</span>].toLowerCase()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 订阅者</span></span><br><span class=\"line\">  $on(eventName, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!eventName) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;event name can\\&#x27;t empty&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.getType(eventName) === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.has(<span class=\"built_in\">this</span>.events, eventName) &amp;&amp; <span class=\"built_in\">Array</span>.isArray(<span class=\"built_in\">this</span>.events[eventName])) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.events[eventName].push(callback)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Reflect</span>.set(<span class=\"built_in\">this</span>.events, eventName, [callback])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.getType(eventName) === <span class=\"string\">&#x27;array&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> eventName) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$on(item, callback)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 订阅注销</span></span><br><span class=\"line\">  $off(eventName, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventName &amp;&amp; !callback) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Reflect</span>.deleteProperty(<span class=\"built_in\">this</span>.events, eventName)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!<span class=\"built_in\">Reflect</span>.has(<span class=\"built_in\">this</span>.events, eventName)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$on(eventName, callback)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cbs = <span class=\"built_in\">this</span>.events[eventName]</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = cbs.length</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> cb = cbs[i]</span><br><span class=\"line\">        <span class=\"comment\">// cb.fn === fn 针对once绑定的事件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cb === callback || cb.fn === callback) &#123;</span><br><span class=\"line\">          cbs.splice(i, <span class=\"number\">1</span>)</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 通知订阅</span></span><br><span class=\"line\">  $emit(eventName, ...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!eventName || (<span class=\"built_in\">this</span>.getType(eventName) !== <span class=\"string\">&#x27;string&#x27;</span> &amp;&amp; <span class=\"built_in\">this</span>.getType(eventName) !== <span class=\"string\">&#x27;array&#x27;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;event name not a string/array&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.getType(eventName) === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Reflect</span>.has(<span class=\"built_in\">this</span>.events, eventName)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> cb <span class=\"keyword\">of</span> <span class=\"built_in\">this</span>.events[eventName]) &#123;</span><br><span class=\"line\">        cb.call(<span class=\"built_in\">this</span>, ...args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.getType(eventName) === <span class=\"string\">&#x27;array&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> eventName_ <span class=\"keyword\">of</span> eventName) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.$emit(eventName_, ...args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-数据结构（栈和堆）和数据类型\"><a href=\"#Q-数据结构（栈和堆）和数据类型\" class=\"headerlink\" title=\"Q: 数据结构（栈和堆）和数据类型 ?\"></a>Q: 数据结构（栈和堆）和数据类型 ?</h4><ul>\n<li>基本数据类型<ul>\n<li>js基本数据类型包括：undefined,null,number,boolean,string.基本数据类型是按值访问的，就是说我们可以操作保存在变量中的实际的值</li>\n<li>基本数据类型的值是不可变的</li>\n<li>基本数据类型不可以添加属性和方法</li>\n<li>基本数据类型的赋值是简单赋值</li>\n<li>基本数据类型的比较是值的比较</li>\n<li>基本数据类型是存放在栈区的</li>\n</ul>\n</li>\n<li>引用类型<ul>\n<li>引用类型的值是可以改变的</li>\n<li>引用类型可以添加属性和方法</li>\n<li>引用类型的赋值是对象引用</li>\n<li>引用类型的比较是引用的比较</li>\n<li>引用类型是同时保存在栈区和堆区中的</li>\n</ul>\n</li>\n<li>基本包装类型(包装对象)</li>\n<li>参考资料： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwODQ3MjI2NA==\">基本数据类型和引用类型的区别详解<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><h4 id=\"Q-弹性盒子中-flex-0-1-auto-表示什么意思\"><a href=\"#Q-弹性盒子中-flex-0-1-auto-表示什么意思\" class=\"headerlink\" title=\"Q:弹性盒子中 flex: 0 1 auto 表示什么意思?\"></a>Q:弹性盒子中 <code>flex: 0 1 auto</code> 表示什么意思?</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三个参数分别对应的是 flex-grow, flex-shrink 和 flex-basis，默认值为0 1 auto。</span><br><span class=\"line\">  1.flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</span><br><span class=\"line\">  2.flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</span><br><span class=\"line\">  3.flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><h4 id=\"Q-webpack-中-loader-和-plugin-的区别是什么\"><a href=\"#Q-webpack-中-loader-和-plugin-的区别是什么\" class=\"headerlink\" title=\"Q: webpack 中 loader 和 plugin 的区别是什么 ?\"></a>Q: <code>webpack</code> 中 <code>loader</code> 和 <code>plugin</code> 的区别是什么 ?</h4><ul>\n<li>这里引用官方文档原文：</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>网友解释</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># loader:让webpack能够处理非js文件(自身职能理解js)，然后你就可以利用 webpack 的打包能力，对它们进行处理。</span><br><span class=\"line\">  例如：css-loader、style-loader、postcss-loader、sass-loader</span><br><span class=\"line\"></span><br><span class=\"line\"># plugins:从打包优化和压缩，一直到重新定义环境中的变量.</span><br><span class=\"line\">  例如：uglify-webpack-plugin、clean-webpack-plugin、babel-polyfill</span><br><span class=\"line\"></span><br><span class=\"line\"># 相对于loader转换指定类型的模块功能，plugins能够被用于执行更广泛的任务比如打包优化、文件管理、环境注入等……</span><br><span class=\"line\"></span><br><span class=\"line\"># webpack 是由nodejs编写的前端资源加载/打包工具，由nodejs提供了强大的文件处理，IO能力。</span><br><span class=\"line\">  loader: 是一个nodejs 函数模块， 传入resource file 或者sourceMap json 结果，读取文件，将文件处理为String 或者 Buffer 格式，然后传给compiler 或者下一个loader.</span><br><span class=\"line\">  plugin: 是能够参与到compilation process的自定义函数，通过hook到每一个编译（compiler）中，触发关键事件或处理。</span><br><span class=\"line\"></span><br><span class=\"line\"># 如何自定义webpack插件：</span><br><span class=\"line\"></span><br><span class=\"line\"># JavaScript 命名函数</span><br><span class=\"line\">  在插件函数prototype 上定义一个apply 方法</span><br><span class=\"line\">  定义一个绑定到webpack 自身的hook</span><br><span class=\"line\">  处理webpack内部特定数据</span><br><span class=\"line\">  功能完成后调用webpack 提供的回调</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">一、webpack的打包原理</span><br><span class=\"line\"></span><br><span class=\"line\">  识别入口文件</span><br><span class=\"line\">  通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖)</span><br><span class=\"line\">  webpack做的就是分析代码，转换代码，编译代码，输出代码</span><br><span class=\"line\">  最终形成打包后的代码</span><br><span class=\"line\">二、什么是loader</span><br><span class=\"line\"></span><br><span class=\"line\">  loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中处理一个文件可以使用多个loader，loader的执行顺序和配置中的顺序是相反的，即最后一个loader最先执行，第一个loader最后执行，第一个执行的loader接收源文件内容作为参数，其它loader接收前一个执行的loader的返回值作为参数，最后执行的loader会返回此模块的JavaScript源码</span><br><span class=\"line\"></span><br><span class=\"line\">三、什么是plugin</span><br><span class=\"line\"></span><br><span class=\"line\">  在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果。</span><br><span class=\"line\"></span><br><span class=\"line\">四、loader和plugin的区别</span><br><span class=\"line\"></span><br><span class=\"line\">  对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的文件转换过程</span><br><span class=\"line\">  plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络请求方面\"><a href=\"#网络请求方面\" class=\"headerlink\" title=\"网络请求方面\"></a>网络请求方面</h3><h4 id=\"Q-谈谈-cookie、localStorage-以及-sessionStorage-区别，以及cookie-为什么不建议用\"><a href=\"#Q-谈谈-cookie、localStorage-以及-sessionStorage-区别，以及cookie-为什么不建议用\" class=\"headerlink\" title=\"Q: 谈谈 cookie、localStorage 以及 sessionStorage 区别，以及cookie 为什么不建议用\"></a>Q: 谈谈 cookie、localStorage 以及 sessionStorage 区别，以及cookie 为什么不建议用</h4><ul>\n<li>三者的异同：上面的使用方式说好了，下面就唠唠三者之间的区别，这个问题其实很多大厂面试的时候也都会问到，所以可以注意一下这几个之间的区别。生命周期：cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效localStorage：除非被手动清除，否则将会永久保存。</li>\n<li>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</li>\n<li>存放数据大小：cookie：4KB左右</li>\n<li>localStorage和sessionStorage：可以保存5MB的信息。</li>\n<li>http请求：cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</li>\n<li>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</li>\n<li>易用性：cookie：需要程序员自己封装，源生的Cookie接口不友好</li>\n<li>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</li>\n<li>应用场景：从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比storage更好用的。其他情况下，可以使用storage，就用storage。</li>\n<li>storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。</li>\n<li>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</li>\n</ul>\n","updated":"2021-04-27T15:09:32.093Z","comments":true,"link":"","permalink":"https://js-mark.com/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/","categories":[{"name":"前端面试","slug":"前端面试","permalink":"https://js-mark.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"面试题","slug":"面试题","permalink":"https://js-mark.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"name":"Javascript","slug":"Javascript","permalink":"https://js-mark.com/tags/Javascript/"}]},{"title":"创建SSH密钥对","date":"2020-04-11T10:54:43.000Z","path":"SSH/创建SSH密钥对/","content":"<p>SSH 密钥对可以让用户无需输入密码即可登录到 SSH 服务器中。由于登录的过程不需要密码，因此可以防止由于密码被拦截、破解造成的账户密码泄露。再加上密码短语(passphrase)的使用，使得 SSH 的安全性更高一层。</p>\n<p>SSH 密钥对总是一把公钥、一把私钥的成对出现；公钥可以自由的添加到远程 SSH 服务器中用来验证用户是否合法；私钥相当于自己的身份认证，需要妥善保存不能泄露。</p>\n<p>SSH 密钥的其使用原理很简单：用户将公钥添加到远程主机中，登录的时候，远程主机会向用户发送一段随即字符串，用户使用自己的私钥加密后，再发送到远程主机。远程主机使用本地存储的公钥进行解密，如果成功，证明用户时可信的，直接允许登录 shell ，不再要求密码。这样就保证了整个登录过程的安全，防止了中间人攻击。</p>\n<span id=\"more\"></span>\n<h1 id=\"生成密钥对\"><a href=\"#生成密钥对\" class=\"headerlink\" title=\"生成密钥对\"></a>生成密钥对</h1><h2 id=\"ssh-keygen-命令\"><a href=\"#ssh-keygen-命令\" class=\"headerlink\" title=\"ssh-keygen 命令\"></a>ssh-keygen 命令</h2><p>我们可以使用 <em>ssh-keygen</em> 命令来生成密钥对：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t ecdsa -b 521 -C &quot;$(whoami)@$(hostname)-$(date -I)&quot;</span><br><span class=\"line\">Generating public&#x2F;private ecdsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (&#x2F;home&#x2F;username&#x2F;.ssh&#x2F;id_ecdsa):</span><br><span class=\"line\">Enter passphrase (empty for no passphrase):</span><br><span class=\"line\">Enter same passphrase again:</span><br><span class=\"line\">Your identification has been saved in &#x2F;home&#x2F;username&#x2F;.ssh&#x2F;id_ecdsa.</span><br><span class=\"line\">Your public key has been saved in &#x2F;home&#x2F;username&#x2F;.ssh&#x2F;id_ecdsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">dd:15:ee:24:20:14:11:01:b8:72:a2:0f:99:4c:79:7f username@localhost-2015-03-08</span><br><span class=\"line\">The key&#39;s randomart image is:</span><br><span class=\"line\">+--[ECDSA  521]---+</span><br><span class=\"line\">|     ..oB&#x3D;.   .  |</span><br><span class=\"line\">|    .    . . . . |</span><br><span class=\"line\">|  .  .      . +  |</span><br><span class=\"line\">| oo.o    . . &#x3D;   |</span><br><span class=\"line\">|o+.+.   S . . .  |</span><br><span class=\"line\">|&#x3D;.   . E         |</span><br><span class=\"line\">| o    .          |</span><br><span class=\"line\">|  .              |</span><br><span class=\"line\">|                 |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>其中可使用 <em>-t</em> 指定加密算法，使用 <em>-b</em> 自定生成密钥长度，使用 <em>-C</em> 添加密钥对的说明comment。生成的密钥对默认存储在用户目录下的 <em>.ssh</em> 目录中，私钥默认名称为 <em>id</em>***_ (即 id_ + 加密算法名称)。还可以使用 <em>-f</em> 指定生成的私钥存储的文件全路径名称；也可以不使用 <em>-f</em> 指定密钥文件路径，在密钥的创建过程中还会提示用户输入密钥文件全路径名称。私钥对应的公钥文件为_私钥文件全名称 + .pub_。</p>\n<p>上面例子中创建了一对长度为512位的椭圆加密算法(ECDSA)加密的密钥对。创建 SSH 密钥对可选择多种加密算法，例如 <em>RSA</em> 、 <em>DSA</em> 、 <em>ECDSA</em> 等。</p>\n<h2 id=\"密码短语-Passphras\"><a href=\"#密码短语-Passphras\" class=\"headerlink\" title=\"密码短语(Passphras)\"></a>密码短语(Passphras)</h2><p>密码短语(passphras)是一连串的单词或文本组成，用来控制对电脑系统的访问。它的用法类似于密码(Password)，但是通常会比密码长度更长，这样就增加了破解的复杂度。密码短语不同于密码，它可以是有实际意义的一段话，便于用户记忆。</p>\n<p>密码短语默认可以不创建，但是这会导致不安全性。私钥是未经加密存储在电脑上的，电脑遗失或被窃取后，任何人拿到你的私钥后都可以随意访问 SSH 服务器；另外，电脑的 <em>root</em> 用户有权限访问电脑上的任意文件，这也包括你的私钥文件。因此，为了提高安全性还是建议用户设置自己的密码短语。</p>\n<p>已经生成的密钥对也可以修改密码短语。假设使用的是 RSA 加密的密钥对，存储到默认路径，输入以下命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ssh-keygen -f ~&#x2F;.ssh&#x2F;id_rsa -p</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SSH-agent\"><a href=\"#SSH-agent\" class=\"headerlink\" title=\"SSH agent\"></a>SSH agent</h1><p>SSH agent 是 OpenSSH 或其它 SSH 程序提供的一个程序，提供了存储私钥的安全方法。如果用户的私钥使用了密码短语来加密的话，那么每一次使用 SSH密钥进行登录时，都需要用户输入正确的的密钥短语。而 SSH agent 程序能够将已经解密的私钥缓存起来，在需要的时候提供给 SSH 客户端，这样用户只需要在将私钥加入 SSH agent 缓存的时候输入一次密码短语就可以了。</p>\n<p>首先确保当前 SSH agent 可用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># start the ssh-agent in the background</span><br><span class=\"line\">$ eval &quot;$(ssh-agent -s)&quot;</span><br><span class=\"line\">Agent pid 29393</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssh-add\"><a href=\"#ssh-add\" class=\"headerlink\" title=\"ssh-add\"></a>ssh-add</h2><p>添加 SSH 密钥到 SSH agent：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class=\"line\">Enter passphrase for &#x2F;home&#x2F;username&#x2F;.ssh&#x2F;id_rsa:</span><br><span class=\"line\">Identity added: &#x2F;home&#x2F;username&#x2F;.ssh&#x2F;id_rsa (&#x2F;home&#x2F;username&#x2F;.ssh&#x2F;id_rsa)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看-SSH-agent-缓存密钥列表\"><a href=\"#查看-SSH-agent-缓存密钥列表\" class=\"headerlink\" title=\"查看 SSH agent 缓存密钥列表\"></a>查看 SSH agent 缓存密钥列表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add -l</span><br><span class=\"line\">2048 b9:a7:f0:44:a5:47:79:a5:ff:9d:14:5c:d3:78:04:65 &#x2F;home&#x2F;username&#x2F;.ssh&#x2F;id_rsa (RSA)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h2><p>将 SSH 公钥添加到 SSH 服务端后，就可以使用 SSH 来连接远程主机了。下面以 GitHub为例测试连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这说明连接成功了。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vYXJ0aWNsZXMvZ2VuZXJhdGluZy1zc2gta2V5cy8=\" title=\"generating ssh keys\">Generating SSH keys<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXNzcGhyYXNlJTIwUGFzc3BocmFzZQ==\">Passphrase(维基百科)<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYWVtb24zNjkuZ2l0aHViLmlvL3NzaC8yMDE1LzAzLzA4LyUyMmh0dHBzOi8vd2lraS5hcmNobGludXgub3JnL2luZGV4LnBocC9TU0hfS2V5c18oJUU3JUFFJTgwJUU0JUJEJTkzJUU0JUI4JUFEJUU2JTk2JTg3KSUyMg==\" title=\"SSH Keys(简体中文)\">SSH Keys(简体中文)<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Tc2gtYWdlbnQlMjBzc2gtYWdlbnQ=\">ssh-agent<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3lldW5nZWVrLmNvbS8yMDE0LzA2LzI2L0dpdCVFNSVBNCU5QSVFNSVCOCU5MCVFNSU4RiVCNyVFOSU4NSU4RCVFNyVCRCVBRS8lMjBHaXQlRTUlQTQlOUElRTUlQjglOTAlRTUlOEYlQjclRTklODUlOEQlRTclQkQlQUU=\">Git多帐号配置<i class=\"fa fa-external-link-alt\"></i></span></p>\n","updated":"2021-04-27T15:09:32.093Z","comments":true,"link":"","permalink":"https://js-mark.com/SSH/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E5%AF%B9/","categories":[{"name":"SSH","slug":"SSH","permalink":"https://js-mark.com/categories/SSH/"}],"tags":[{"name":"全栈开发","slug":"全栈开发","permalink":"https://js-mark.com/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"},{"name":"SSH","slug":"SSH","permalink":"https://js-mark.com/tags/SSH/"}]},{"title":"SSH 简介","date":"2020-04-11T10:47:31.000Z","path":"SSH/SSH-简介/","content":"<p>SSH(即 Secure Shell)，是一项创建在应用层和传输层基础上的安全协议，为计算机 Shell 提供安全的传输和使用环境。</p>\n<p>传统的网络服务程序，如FTP、POP、Telnet等本质上并不安全；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。</p>\n<p>而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。</p>\n<p>SSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。</p>\n<p>最初的 SSH 协议由芬兰一家公司的研究员Tatu Ylönen于1995年设计开发，但是由于版权和加密算法的等等的限制，很多人转而使用开源的自由软件 OpenSSH。</p>\n<span id=\"more\"></span>\n<p>客户端安装 openssh-client 用以登录远程主机：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openssh-client</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>服务端安装 openssh-server 用以提供客户端登录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openssh-server</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>SSH 提供了两种级别的安全认证，基于密码的安全认证和基于密钥的安全认证：</p>\n<h2 id=\"基于密码的安全认证\"><a href=\"#基于密码的安全认证\" class=\"headerlink\" title=\"基于密码的安全认证\"></a>基于密码的安全认证</h2><p>基于密码的安全认证，登录的时候需要提供账号和密码；远程主机将自己的公钥分发给登录客户端，客户端访问主机使用该公钥加密；远程主机使用自己的私钥解密数据。</p>\n<p>登录的流程如下：</p>\n<ol>\n<li>远程主机收到用户登录请求，将自己的公钥发给用户</li>\n<li>用户通过远程主机公钥的指纹确认主机的真实性，然后使用远程主机公钥将登录密码加密后，发送回远程主机</li>\n<li>远程主机使用自己的私钥解码登录密码，验证密码正确后，允许用户登录</li>\n</ol>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>假设需要以用户名 user 登录远程主机 host：</p>\n<p>如果本地用户名与远程用户名一致，可以省略用户名：</p>\n<p>SSH 默认端口号22，可以使用 p 参数来指定端口号：</p>\n<p>第一次登录到远程主机时，系统会出现如下提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host</span><br><span class=\"line\">The authenticity of host &#39;host (***.***.***.***)&#39; can&#39;t be established.</span><br><span class=\"line\">RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes&#x2F;no)?</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这段话提示用户无法确认远程主机的真实性，只知道 RSA 公钥的指纹，询问用户是否继续。</p>\n<p>我们使用 ssh-keygen 工具可以生成 SSH 密钥对，其中公钥的长度可以很长，对用户来说不方便直接对比验证，因此对其进行了 MD5 计算，生成了一个128的指纹，这样再进行比较就比较容易了。</p>\n<p>那么这里就要求我们事先知道远程主机的公钥指纹，才可以确认主机的真实性。</p>\n<p>用户确认主机的真实性，输入 yes 继续连接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: Permanently added &#39;host,***.***.***.***&#39; (RSA) to the list of known hosts.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后输入密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Password: (enter password)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>密码正确，即可登录成功。</p>\n<p>当第一次登录成功后，远程主机的公钥会被保存到文件 $HOME/.ssh/known_hosts 中，下次再连接这台主机就会跳过警告，直接提示输入密码。</p>\n<p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是 /etc/ssh/ssh_known_hosts ，保存一些对所有用户都可信赖的远程主机的公钥。</p>\n<h3 id=\"中间人攻击\"><a href=\"#中间人攻击\" class=\"headerlink\" title=\"中间人攻击\"></a>中间人攻击</h3><p>基于密码的安全认证无法避免中间人攻击：</p>\n<p>网络提供者(ISP、公共 wifi 提供者等，或其它形式拦截者)，拦截用户的登录请求，用自己的公钥伪造远程主机的公钥发送给用户，然后获取用户加密后的密码，用自己的私钥解密已获取用户密码，这样用户的账号密码就被盗取了。</p>\n<h2 id=\"基于密钥的安全认证\"><a href=\"#基于密钥的安全认证\" class=\"headerlink\" title=\"基于密钥的安全认证\"></a>基于密钥的安全认证</h2><p>基于密钥的安全认证，客户端将将公钥上传到服务器。登录的时候，客户端向服务器发送登录请求；服务器收到请求后，向用户发送一段随机字符串；用户用自己的私钥加密后，再发送回服务器；服务器使用事先存储的公钥进行解密，如果解密成功，证明用户可信，允许登录。</p>\n<p>这种方式，在登录服务器的过程中，不需要上传密码，增加了安全性。</p>\n<p>密钥的生成可参看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYWVtb24zNjkuZ2l0aHViLmlvL3NzaC8yMDE1LzAzLzA4L2dlbmVyYXRpbmctc3NoLWtleXM=\" title=\"创建 SSH 密钥对\">创建 SSH 密钥对<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<p>我们上传公钥到服务端，即将公钥内容附加到服务器用户目录下的 _$HOME/.ssh/authorized_keys_ 文件中：</p>\n<p>服务端首先需要安装 openssh-server 程序用以提供 ssh 登录服务，在服务器(Ubuntu 14.04 LTS)上查看服务是否打开：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ service ssh status</span><br><span class=\"line\">ssh start&#x2F;running, process 1201</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>检查 ssh 服务配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile .ssh&#x2F;authorized_keys</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>是否开启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &#x2F;etc&#x2F;ssh&#x2F;sshd_config | grep RSAAuthentication</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">$ cat &#x2F;etc&#x2F;ssh&#x2F;sshd_config | grep PubkeyAuthentication</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">$ cat &#x2F;etc&#x2F;ssh&#x2F;sshd_config | grep AuthorizedKeysFile</span><br><span class=\"line\">AuthorizedKeysFile %h&#x2F;.ssh&#x2F;authorized_keys</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上传公钥：</p>\n<p>重启远程主机 ssh 服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host &#39;service ssh restart&#39;</span><br><span class=\"line\"># ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\">$ ssh user@host &#39;&#x2F;etc&#x2F;init.d&#x2F;ssh restart&#39;</span><br><span class=\"line\"># debian</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用更复杂的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh&#x2F;authorized_keys&#39; &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个命令可以清晰的看到公钥的上传过程：</p>\n<ol>\n<li>在远程主机用户目录下创建目录：~/.ssh</li>\n<li>将本地主机文件 ~/.ssh/id_rsa.pub 拷贝到远程主机的文件 ~/.ssh/authorized_keys ，追加到文件末尾</li>\n</ol>\n<p>然后重启服务即可</p>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/SSH/SSH-%E7%AE%80%E4%BB%8B/","categories":[{"name":"SSH","slug":"SSH","permalink":"https://js-mark.com/categories/SSH/"}],"tags":[{"name":"全栈开发","slug":"全栈开发","permalink":"https://js-mark.com/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"},{"name":"SSH","slug":"SSH","permalink":"https://js-mark.com/tags/SSH/"}]},{"title":"使用'SSH config'文件","date":"2020-04-11T10:38:08.000Z","path":"SSH/使-SSH-config-文件/","content":"<p><code>ssh</code>的介绍及使用参看：<a href=\"/SSH/SSH-%E7%AE%80%E4%BB%8B/#more\" title=\"SSH 简介\"><code>SSH简介</code></a>、<a href=\"/SSH/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E5%AF%B9/#more\" title=\"创建 SSH 密钥对\"><code>创建SSH密钥对</code></a>。</p>\n<span id=\"more\"></span>\n<h1 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h1><p><code>ssh</code>程序可以从以下途径获取配置参数：</p>\n<ol>\n<li>命令行选项</li>\n<li>用户配置文件 (~/.ssh/config)</li>\n<li>系统配置文件 (/etc/ssh/ssh_config)</li>\n</ol>\n<p>配置文件可分为多个配置区段，每个配置区段使用<code>Host</code>来区分。我们可以在命令行中输入不同的<code>host</code>来加载不同的配置段。</p>\n<p>对每一个配置项来说，首次获取的参数值将被采用，因此通用的设置应该放到文件的后面，特定<code>host</code>相关的配置项应放到文件的前面。</p>\n<h1 id=\"常用配置项\"><a href=\"#常用配置项\" class=\"headerlink\" title=\"常用配置项\"></a>常用配置项</h1><p>下面介绍一些常用的<code>SSH</code>配置项：</p>\n<h2 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h2><p><code>Host</code>配置项标识了一个配置区段。</p>\n<p><code>ssh</code>配置项参数值可以使用通配符：<code>*</code>代表0～n个非空白字符，<code>?</code>代表一个非空白字符，<code>!</code>表示例外通配。</p>\n<p>我们可以在系统配置文件中看到一个匹配所有<code>host</code>的默认配置区段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &#x2F;etc&#x2F;ssh&#x2F;ssh_config | grep &#39;^Host&#39;</span><br><span class=\"line\">Host *</span><br></pre></td></tr></table></figure>\n\n<p>这里有一些默认配置项，我们可以在用户配置文件中覆盖这些默认配置。</p>\n<h2 id=\"GlobalKnownHostsFile\"><a href=\"#GlobalKnownHostsFile\" class=\"headerlink\" title=\"GlobalKnownHostsFile\"></a>GlobalKnownHostsFile</h2><p>指定一个或多个全局认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为：/etc/ssh/ssh_known_hosts, /etc/ssh/ssh_known_hosts2.</p>\n<h2 id=\"HostName\"><a href=\"#HostName\" class=\"headerlink\" title=\"HostName\"></a>HostName</h2><p>指定远程主机名，可以直接使用数字IP地址。如果主机名中包含 ‘%h’ ，则实际使用时会被命令行中的主机名替换。</p>\n<h2 id=\"IdentityFile\"><a href=\"#IdentityFile\" class=\"headerlink\" title=\"IdentityFile\"></a>IdentityFile</h2><p>指定密钥认证使用的私钥文件路径。默认为 ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 或 ~/.ssh/id_rsa 中的一个。文件名称可以使用以下转义符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;%d&#39; 本地用户目录</span><br><span class=\"line\">&#39;%u&#39; 本地用户名称</span><br><span class=\"line\">&#39;%l&#39; 本地主机名</span><br><span class=\"line\">&#39;%h&#39; 远程主机名</span><br><span class=\"line\">&#39;%r&#39; 远程用户名</span><br></pre></td></tr></table></figure>\n\n<p>可以指定多个密钥文件，在连接的过程中会依次尝试这些密钥文件。</p>\n<h2 id=\"Port\"><a href=\"#Port\" class=\"headerlink\" title=\"Port\"></a>Port</h2><p>指定远程主机端口号，默认为 22 。</p>\n<h2 id=\"User\"><a href=\"#User\" class=\"headerlink\" title=\"User\"></a>User</h2><p>指定登录用户名。</p>\n<h2 id=\"UserKnownHostsFile\"><a href=\"#UserKnownHostsFile\" class=\"headerlink\" title=\"UserKnownHostsFile\"></a>UserKnownHostsFile</h2><p>指定一个或多个用户认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为： ~/.ssh/known_hosts, ~/.ssh/known_hosts2.</p>\n<p>还有更多参数的介绍，可以参看用户手册：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man ssh config</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><ul>\n<li>以下连接为例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSH 服务器： ssh.test.com</span><br><span class=\"line\">端口号： 2200</span><br><span class=\"line\">账户： user</span><br><span class=\"line\">密钥文件： ~&#x2F;.ssh&#x2F;id_rsa_test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"密码认证登录方式为\"><a href=\"#密码认证登录方式为\" class=\"headerlink\" title=\"密码认证登录方式为\"></a>密码认证登录方式为</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -p 2200 -i ~&#x2F;.ssh&#x2F;id_rsa_test user@ssh.test.com</span><br><span class=\"line\">user@ssh.test.com&#39;s password:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"密钥认证登录方式\"><a href=\"#密钥认证登录方式\" class=\"headerlink\" title=\"密钥认证登录方式\"></a>密钥认证登录方式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa_test user@ssh.test.com</span><br><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class=\"line\">user@ssh.test.com&#39;s password:</span><br><span class=\"line\"></span><br><span class=\"line\">Number of key(s) added: 1</span><br><span class=\"line\"></span><br><span class=\"line\">Now try logging into the machine, with:   &quot;ssh &#39;user@ssh.test.com&#39;&quot;</span><br><span class=\"line\">and check to make sure that only the key(s) you wanted were added.</span><br><span class=\"line\"></span><br><span class=\"line\">$ ssh user@ssh.test.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用配置文件方式\"><a href=\"#使用配置文件方式\" class=\"headerlink\" title=\"使用配置文件方式\"></a>使用配置文件方式</h2><ul>\n<li>有如下配置文件：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~&#x2F;.ssh&#x2F;config</span><br><span class=\"line\">Host sshtest</span><br><span class=\"line\">    HostName ssh.test.com</span><br><span class=\"line\">    User user</span><br><span class=\"line\">    Port 2200</span><br><span class=\"line\">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_test</span><br><span class=\"line\"></span><br><span class=\"line\">Host ssttest2</span><br><span class=\"line\">    HostName ssh.test2.com</span><br><span class=\"line\">    User user2</span><br><span class=\"line\">    Port 2345</span><br><span class=\"line\">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_test2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用配置文件登录：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh sshtest</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><ul>\n<li><p>1. Ubuntu</p>\n</li>\n<li><p>2. macOs High Sierra(10.13.2)</p>\n</li>\n</ul>\n<h1 id=\"参看\"><a href=\"#参看\" class=\"headerlink\" title=\"参看\"></a>参看</h1><p><a href=\"/SSH/SSH-%E7%AE%80%E4%BB%8B/#more\" title=\"SSH 简介\">SSH简介</a></p>\n<p><a href=\"/SSH/%E5%88%9B%E5%BB%BASSH%E5%AF%86%E9%92%A5%E5%AF%B9/#more\" title=\"创建 SSH 密钥对\">创建 SSH 密钥对</a></p>\n","updated":"2021-04-27T15:09:32.093Z","comments":true,"link":"","permalink":"https://js-mark.com/SSH/%E4%BD%BF-SSH-config-%E6%96%87%E4%BB%B6/","categories":[{"name":"SSH","slug":"SSH","permalink":"https://js-mark.com/categories/SSH/"}],"tags":[{"name":"全栈开发","slug":"全栈开发","permalink":"https://js-mark.com/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"},{"name":"SSH","slug":"SSH","permalink":"https://js-mark.com/tags/SSH/"}]},{"title":"修改了SSH默认端口之后，如何配置git？","date":"2020-01-19T23:24:30.000Z","path":"git操作/修改了SSH默认端口之后，如何配置git？/","content":"<h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p>由于安全或者其它原因，我们可能会修改默认的SSH服务端口号，默认情况下，已有的git项目在pull或者push的时候会报错！</p>\n<p>现在假设原来的项目的remote设置为<span class=\"exturl\" data-url=\"bWFpbHRvOiYjMTAzOyYjeDY5OyYjeDc0OyYjNjQ7JiMxMjA7JiN4Nzg7JiMxMjA7JiM0NjsmIzk5OyYjMTExOyYjeDZkOw==\">&#103;&#x69;&#x74;&#64;&#120;&#x78;&#120;&#46;&#99;&#111;&#x6d;<i class=\"fa fa-external-link-alt\"></i></span>:Projects/xxx.git，将服务器SSH默认端口修改为223后，导致push或 pull出错</p>\n<span id=\"more\"></span>\n<h3 id=\"有两个解决办法\"><a href=\"#有两个解决办法\" class=\"headerlink\" title=\"有两个解决办法\"></a>有两个解决办法</h3><h4 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin ssh://git@xxx.com:223/~/Projects/p1.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat&gt;~/.ssh/config</span><br><span class=\"line\"><span class=\"comment\"># 映射一个别名</span></span><br><span class=\"line\">Host xxx.com</span><br><span class=\"line\">HostName xxxx.com</span><br><span class=\"line\">Port 223</span><br><span class=\"line\">AddKeysToAgent yes</span><br><span class=\"line\">UseKeychain yes</span><br><span class=\"line\"><span class=\"comment\">#此处是开启git的ssh翻墙代理</span></span><br><span class=\"line\"><span class=\"comment\">#ProxyCommand /usr/bin/nc -X 5 -x 127.0.0.1:1086 %h %p</span></span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>修改p1.git项目下的git配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin git@xxx:Projects/p1.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tLzIwMTYvMDIvMTgvZ2l0bGFiLWRvdC1jb20tbm93LXN1cHBvcnRzLWFuLWFsdGVybmF0ZS1naXQtcGx1cy1zc2gtcG9ydC8=\">gitlab 社区解决方案<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","updated":"2021-04-27T15:09:32.093Z","comments":true,"link":"","permalink":"https://js-mark.com/git%E6%93%8D%E4%BD%9C/%E4%BF%AE%E6%94%B9%E4%BA%86SSH%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEgit%EF%BC%9F/","categories":[{"name":"git操作","slug":"git操作","permalink":"https://js-mark.com/categories/git%E6%93%8D%E4%BD%9C/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"git","slug":"git","permalink":"https://js-mark.com/tags/git/"},{"name":"sourceTree","slug":"sourceTree","permalink":"https://js-mark.com/tags/sourceTree/"}]},{"title":"MAC常用软件推荐","date":"2019-06-10T09:44:40.000Z","path":"Mac/mac常用软件/","content":"<h2 id=\"Coding-IDE\"><a href=\"#Coding-IDE\" class=\"headerlink\" title=\"Coding IDE\"></a>Coding IDE</h2><ul>\n<li>Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode 常用插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>atom github 出品开源编辑器 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdG9tLmlvLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span>,<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdG9tLWNoaW5hLm9yZy8=\">中文社区<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>sublime3 收费编辑器 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>微信开发者工具（开发微信小程序和微信公众号） <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2RldnRvb2xzL2Rvd25sb2FkLmh0bWw=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>支付宝小程序（开发支付宝小程序） <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL21pbmkvaWRlL2Rvd25sb2Fk\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>HBuilder DCloud 出品 IDE <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kY2xvdWQuaW8v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Webstorm 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费。 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS93ZWJzdG9ybS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span><span id=\"more\"></span>\n\n</li>\n</ul>\n<h2 id=\"Git-GUI\"><a href=\"#Git-GUI\" class=\"headerlink\" title=\"Git GUI\"></a>Git GUI</h2><ul>\n<li><p>SourceTre 一个免费开源的 windows 和 mac 上的 git 客户端 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc291cmNldHJlZWFwcC5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Gitkraken 一个免费开源的 windows、mac以及 linux 上的 git 客户端,ui 很棒！ <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2l0a3Jha2VuLmNvbS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"调试软件\"><a href=\"#调试软件\" class=\"headerlink\" title=\"调试软件\"></a>调试软件</h2><ul>\n<li><p>Charles是HTTP代理/ HTTP监视器/反向代理，使开发人员可以查看其计算机与Internet之间的所有HTTP和SSL / HTTPS通信。这包括请求，响应和HTTP标头（其中包含cookie和缓存信息） <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hhcmxlc3Byb3h5LmNvbS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Fiddler可定制的免费工具、Web会话操作、网页调试 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVsZXJpay5jb20vZmlkZGxlcg==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Wireshark专业的抓包工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"MD文档编写\"><a href=\"#MD文档编写\" class=\"headerlink\" title=\"MD文档编写\"></a>MD文档编写</h2><ul>\n<li>Markeditor <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWFya2VkaXRvci5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>MWeb <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5td2ViLmltLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Typora <span class=\"exturl\" data-url=\"aHR0cHM6Ly90eXBvcmEuaW8v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Markdown 在线编辑器<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW5kYW8uZ2l0aHViLmlvL2VkaXRvci5tZC8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"邮件收发\"><a href=\"#邮件收发\" class=\"headerlink\" title=\"邮件收发\"></a>邮件收发</h2><ul>\n<li>网易邮箱</li>\n<li>腾讯邮箱</li>\n<li>Foxmail</li>\n</ul>\n<h2 id=\"终端\"><a href=\"#终端\" class=\"headerlink\" title=\"终端\"></a>终端</h2><ul>\n<li><p>iterm2 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXRlcm0yLmNvbS9kb3dubG9hZHMuaHRtbA==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Iterm2 配置<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2VpeHVxaW4vcC83MDI5MTc3Lmh0bWw=\">Mac下终端配置（iterm2 + oh-my-zsh + solarized配色方案）<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"小型工具软件\"><a href=\"#小型工具软件\" class=\"headerlink\" title=\"小型工具软件\"></a>小型工具软件</h2><ul>\n<li>SwitchHosts 切换 hosts 工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vbGRqLmdpdGh1Yi5pby9Td2l0Y2hIb3N0cy8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Snipaste截图工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5zbmlwYXN0ZS5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><ul>\n<li>本文不提供下载链接，只做推荐！</li>\n</ul>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/Mac/mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/","categories":[{"name":"Mac","slug":"Mac","permalink":"https://js-mark.com/categories/Mac/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"Mac","slug":"Mac","permalink":"https://js-mark.com/tags/Mac/"},{"name":"软件","slug":"软件","permalink":"https://js-mark.com/tags/%E8%BD%AF%E4%BB%B6/"}]},{"title":"分享 stylus 语法学习笔记","date":"2019-05-28T15:51:21.000Z","path":"JavaScript/stylus语法笔记/","content":"<h3 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$var_name</span> = value</span><br></pre></td></tr></table></figure>\n\n<p>is defined 用来判断一个变量是否已经被赋值。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo is defined</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>或者采用内置函数 lookup(name)：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"number\">#80e2e9</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">lookup</span><span class=\"params\">(name)</span></span> <span class=\"comment\">// 变量名，判断是否已经定义该变量</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; #80e2e9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">$i</span> <span class=\"keyword\">in</span> (<span class=\"number\">0</span> .. <span class=\"number\">24</span>)</span><br><span class=\"line\">   .cc-&#123;<span class=\"variable\">$i</span>&#125;</span><br><span class=\"line\">      <span class=\"attribute\">width</span> <span class=\"number\">100</span> / <span class=\"variable\">$i</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>@import “文件路径”<br>@import “文件路径/*“导入目录下所有 styl 文件</p>\n<p>@require “文件路径”<br>@require “文件路径/*“导入目录下所有 styl 文件</p>\n<h3 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h3><p>{}使用该花括号进行插值<br>Stylus 支持使用{}字符包围表达式进行插值，然后表达式成为标识符的一部分。<br>例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-&#123;<span class=\"string\">&#x27;border&#x27;</span> + <span class=\"string\">&#x27;-radius&#x27;</span>&#125;评估为-webkit-<span class=\"attribute\">border-radius</span>。</span><br></pre></td></tr></table></figure>\n\n<p>选择器插值</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table</span><br><span class=\"line\">  <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child</span>(&#123;row&#125;)</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">10px</span> * row</span><br></pre></td></tr></table></figure>\n\n<p>会产生如下 css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>您还可以通过构建一个字符串并将它们插入到位来将多个选择器放在一个变量中：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mySelectors = <span class=\"string\">&#x27;#foo,#bar,.baz&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;mySelectors&#125;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#000</span></span><br></pre></td></tr></table></figure>\n\n<p>产生如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#foo</span>,</span><br><span class=\"line\"><span class=\"selector-id\">#bar</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.baz</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h3><p>mixin 和函数都以相同的方式定义，但它们以不同的方式应用。</p>\n<p>例如，我们有一个 border-radius(n)下面定义的函数，它作为 mixin 调用（即，作为语句调用，而不是表达式的一部分）。</p>\n<p>在 border-radius()选择器中调用时，属性将展开并复制到选择器中。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=button]</span></span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>(<span class=\"number\">5px</span>)</span><br></pre></td></tr></table></figure>\n\n<p>编译后</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;button&quot;</span>]</span> &#123;</span><br><span class=\"line\">\t-webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t-moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 mixins 时，您可以完全省略括号，提供出色的透明供应商属性支持！</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=button]</span></span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> <span class=\"number\">5px</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，border-radius 我们的 mixin 中的内容被视为属性，而不是递归函数调用。<br>为了更进一步，我们可以利用自动 arguments 局部变量，包含传递的表达式，允许传递多个值：<br>arguments 和 js 函数的 arguments 差不多都是获取函数实际参数<br>length(arguments) 获取参数个数</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> arguments</span><br></pre></td></tr></table></figure>\n\n<p>现在我们可以传递像 border-radius 1px 2px / 3px 4px！</p>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><p>^[N],选择嵌套选择器的第个<br>^[N]表示部分引用，其中 N 是数字(-1, 0, 1 等等)。<br>^[0]引用嵌套选择器中的第一层，^[1]则引用第一层和第二层。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ^<span class=\"selector-attr\">[0]</span><span class=\"selector-pseudo\">:hover</span> &amp;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n\n<p>注：第一层和第二层是一个完整的选择器.foo__bar，但^[0]部分引用第一层，即.foo。<br>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若 N 为负数，则从尾部计算。如^[-1]表示去除最后一层后剩下部分的引用。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    &amp;_baz</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">      ^<span class=\"selector-attr\">[-1]</span><span class=\"selector-pseudo\">:hover</span> &amp;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n\n<p>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo__bar</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"块混合-Block-mixins\"><a href=\"#块混合-Block-mixins\" class=\"headerlink\" title=\"块混合 Block mixins\"></a>块混合 Block mixins</h3><p>我们使用+前缀可以给混合(mixins)传递块(blocks):</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  .bar</span><br><span class=\"line\">    &#123;block&#125;<span class=\"comment\">// 调用 mixins里的代码块类似vue 的slot一样</span></span><br><span class=\"line\"></span><br><span class=\"line\">+foo()</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\">编译后：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内置方法\"><a href=\"#内置方法\" class=\"headerlink\" title=\"内置方法\"></a>内置方法</h3><p><span class=\"exturl\" data-url=\"aHR0cDovL3N0eWx1cy1sYW5nLmNvbS9kb2NzL2JpZnMuaHRtbA==\">文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n","updated":"2021-04-27T15:09:32.093Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/stylus%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"stylus","slug":"stylus","permalink":"https://js-mark.com/tags/stylus/"},{"name":"css","slug":"css","permalink":"https://js-mark.com/tags/css/"}]},{"title":"NPM error \"npm Cannot read property 'length' of undefined\"","date":"2019-05-28T14:59:35.000Z","path":"JavaScript/NPM-Error/","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ul>\n<li>出现错误版本<code>npm 6.9.0</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g outdated</span><br><span class=\"line\"><span class=\"comment\"># 检测所有全局依赖包更新情况</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<ul>\n<li>报错显示</li>\n</ul>\n<p><img data-src=\"/assets/img/2019/05/1.jpg\" alt=\"image\"></p>\n<h3 id=\"修复方法\"><a href=\"#修复方法\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 148行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> columns = [</span><br><span class=\"line\">\tdepname,</span><br><span class=\"line\">\thas || <span class=\"string\">&quot;MISSING&quot;</span>,</span><br><span class=\"line\">\twant,</span><br><span class=\"line\">\tlatest,</span><br><span class=\"line\">\tdeppath || <span class=\"string\">&quot;global&quot;</span> <span class=\"comment\">// 此处修改为这样</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ucG0uY29tbXVuaXR5L3QvbnBtLW91dGRhdGVkLXRocm93LWFuLWVycm9yLWNhbm5vdC1yZWFkLXByb3BlcnR5LWxlbmd0aC1vZi11bmRlZmluZWQvNTkyOQ==\">“npm-outdated-throw-an-error-cannot-read-property-length-of-undefined”<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25wbS9jbGkvY29tbWl0L2QwNzU0NzE1NGViOGE4OGFhNGZkZThhMzdlMTI4ZTFlMzI3MmFkYzEjZGlmZi0zZDIwNDk5ZDU4ZjE0YzZmMWVkZmU5M2Q4YmE4YThhMg==\">“npm Cannot read property ‘length’ of undefined”<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/NPM-Error/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"NPM","slug":"NPM","permalink":"https://js-mark.com/tags/NPM/"},{"name":"NodeJs","slug":"NodeJs","permalink":"https://js-mark.com/tags/NodeJs/"}]},{"title":"ES6语法（一）","date":"2019-03-25T14:51:56.000Z","path":"JavaScript/ES6语法（一）/","content":"<p>学习 ES6 语法笔记</p>\n<span id=\"more\"></span>\n<h4 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h4><h5 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h5><h6 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h6><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p>以前，为变量赋值，只能直接指定值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 允许写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p>\n<p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]]</span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [, , third] = [<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>, <span class=\"string\">&quot;baz&quot;</span>]</span><br><span class=\"line\">third <span class=\"comment\">// &quot;baz&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">&quot;a&quot;</span>]</span><br><span class=\"line\">x <span class=\"comment\">// &quot;a&quot;</span></span><br><span class=\"line\">y <span class=\"comment\">// undefined</span></span><br><span class=\"line\">z <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n\n<p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo] = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> [bar, foo] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p>\n<p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>]</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">d <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>上面两个例子，都属于不完全解构，但是可以成功。</p>\n<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p>\n<p>对于 Set 结构，也可以使用数组的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z] = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>])</span><br><span class=\"line\">x <span class=\"comment\">// &quot;a&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> b = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> a</span><br><span class=\"line\">\t\t;[a, b] = [b, a + b]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second, third, fourth, fifth, sixth] = fibs()</span><br><span class=\"line\">sixth <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>fibs</code>是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p>\n<h6 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h6><p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = []</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">&quot;b&quot;</span>] = [<span class=\"string\">&quot;a&quot;</span>] <span class=\"comment\">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">&quot;b&quot;</span>] = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>]</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p>\n<p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;aaa&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，因为<code>x</code>能取到值，所以函数<code>f</code>根本不会执行。上面的代码其实等价于下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">1</span>][<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">\tx = f()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tx = [<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [] <span class=\"comment\">// x=1; y=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>] <span class=\"comment\">// x=2; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>] <span class=\"comment\">// x=1; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [] <span class=\"comment\">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面最后一个表达式之所以会报错，是因为<code>x</code>用<code>y</code>做默认值时，<code>y</code>还没有声明。</p>\n<h5 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h5><p>解构不仅可以用于数组，还可以用于对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&quot;bbb&quot;</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\">bar <span class=\"comment\">// &quot;bbb&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&quot;bbb&quot;</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\">bar <span class=\"comment\">// &quot;bbb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&quot;bbb&quot;</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于<code>undefined</code>。</p>\n<p>如果变量名与属性名不一致，必须写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&quot;bbb&quot;</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">&quot;hello&quot;</span>, <span class=\"attr\">last</span>: <span class=\"string\">&quot;world&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj</span><br><span class=\"line\">f <span class=\"comment\">// &#x27;hello&#x27;</span></span><br><span class=\"line\">l <span class=\"comment\">// &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: foo, <span class=\"attr\">bar</span>: bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&quot;bbb&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&quot;bbb&quot;</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// &quot;aaa&quot;</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。</p>\n<p>与数组一样，解构也可以用于嵌套结构的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">&quot;Hello&quot;</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">&quot;World&quot;</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// &quot;Hello&quot;</span></span><br><span class=\"line\">y <span class=\"comment\">// &quot;World&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，这时<code>p</code>是模式，不是变量，因此不会被赋值。如果<code>p</code>也要作为变量赋值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">&quot;Hello&quot;</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">&quot;World&quot;</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp,</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// &quot;Hello&quot;</span></span><br><span class=\"line\">y <span class=\"comment\">// &quot;World&quot;</span></span><br><span class=\"line\">p <span class=\"comment\">// [&quot;Hello&quot;, &#123;y: &quot;World&quot;&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123;</span><br><span class=\"line\">\t\t\tline: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tcolumn: <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tloc,</span><br><span class=\"line\">\tloc: &#123; start &#125;,</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123; line &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; = node</span><br><span class=\"line\">line <span class=\"comment\">// 1</span></span><br><span class=\"line\">loc <span class=\"comment\">// Object &#123;start: Object&#125;</span></span><br><span class=\"line\">start <span class=\"comment\">// Object &#123;line: 1, column: 5&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码有三次解构赋值，分别是对<code>loc</code>、<code>start</code>、<code>line</code>三个属性的解构赋值。注意，最后一次对<code>line</code>属性的解构赋值之中，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不是变量。</p>\n<p>下面是嵌套赋值的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\"></span><br><span class=\"line\">;(&#123; <span class=\"attr\">foo</span>: obj.prop, <span class=\"attr\">bar</span>: arr[<span class=\"number\">0</span>] &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span>, <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"comment\">// &#123;prop:123&#125;</span></span><br><span class=\"line\">arr <span class=\"comment\">// [true]</span></span><br></pre></td></tr></table></figure>\n\n<p>对象的解构也可以指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x, y = <span class=\"number\">5</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">5</span> &#125;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">&quot;Something went wrong&quot;</span> &#125; = &#123;&#125;</span><br><span class=\"line\">msg <span class=\"comment\">// &quot;Something went wrong&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">undefined</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，属性<code>x</code>等于<code>null</code>，因为<code>null</code>与<code>undefined</code>不严格相等，所以是个有效的赋值，导致默认值<code>3</code>不会生效。</p>\n<p>如果解构失败，变量的值等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo &#125; = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">&quot;baz&quot;</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tfoo: &#123; bar &#125;</span><br><span class=\"line\">&#125; = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">&quot;baz&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，等号左边对象的<code>foo</code>属性，对应一个子对象。该子对象的<code>bar</code>属性，解构时会报错。原因很简单，因为<code>foo</code>这时等于<code>undefined</code>，再取子属性就会报错，请看下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _tmp = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">&quot;baz&quot;</span> &#125;</span><br><span class=\"line\">_tmp.foo.bar <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的写法会报错，因为 JavaScript 引擎会将<code>&#123;x&#125;</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\">;(&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p>\n<p>解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(&#123;&#125; = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>])</span><br><span class=\"line\">;(&#123;&#125; = <span class=\"string\">&quot;abc&quot;</span>)</span><br><span class=\"line\">;(&#123;&#125; = [])</span><br></pre></td></tr></table></figure>\n\n<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码将<code>Math</code>对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>\n<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"number\">0</span>: first, [arr.length - <span class=\"number\">1</span>]: last &#125; = arr</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">last <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码对数组进行对象解构。数组<code>arr</code>的<code>0</code>键对应的值是<code>1</code>，<code>[arr.length - 1]</code>就是<code>2</code>键，对应的值是<code>3</code>。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。</p>\n<h5 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h5><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">a <span class=\"comment\">// &quot;h&quot;</span></span><br><span class=\"line\">b <span class=\"comment\">// &quot;e&quot;</span></span><br><span class=\"line\">c <span class=\"comment\">// &quot;l&quot;</span></span><br><span class=\"line\">d <span class=\"comment\">// &quot;l&quot;</span></span><br><span class=\"line\">e <span class=\"comment\">// &quot;o&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">length</span>: len &#125; = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h5><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"number\">123</span></span><br><span class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"literal\">true</span></span><br><span class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，数值和布尔值的包装对象都有<code>toString</code>属性，因此变量<code>s</code>都能取到值。</p>\n<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: x &#125; = <span class=\"literal\">undefined</span> <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: y &#125; = <span class=\"literal\">null</span> <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h5><p>函数的参数也可以使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].map(<span class=\"function\">(<span class=\"params\">[a, b]</span>) =&gt;</span> a + b)</span><br><span class=\"line\"><span class=\"comment\">// [ 3, 7 ]</span></span><br></pre></td></tr></table></figure>\n\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span> &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code>x</code>和<code>y</code>的值。如果解构失败，<code>x</code>和<code>y</code>等于默认值。</p>\n<p>注意，下面的写法会得到不一样的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x, y &#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码是为函数<code>move</code>的参数指定默认值，而不是为变量<code>x</code>和<code>y</code>指定默认值，所以会得到与前一种写法不同的结果。</p>\n<p><code>undefined</code>就会触发函数参数的默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">x = <span class=\"string\">&quot;yes&quot;</span></span>) =&gt;</span> x)</span><br><span class=\"line\"><span class=\"comment\">// [ 1, &#x27;yes&#x27;, 3 ]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"圆括号问题\"><a href=\"#圆括号问题\" class=\"headerlink\" title=\"圆括号问题\"></a>圆括号问题</h5><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>\n<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>\n<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>\n<h6 id=\"不能使用圆括号的情况\"><a href=\"#不能使用圆括号的情况\" class=\"headerlink\" title=\"不能使用圆括号的情况\"></a>不能使用圆括号的情况</h6><p>以下三种解构赋值不得使用圆括号。</p>\n<p>（1）变量声明语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [(a)] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">x</span>: (c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> (&#123;<span class=\"attr\">x</span>: c&#125;) = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x: c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x): c&#125; = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">o</span>: (&#123; <span class=\"attr\">p</span>: p &#125;) &#125; = &#123; <span class=\"attr\">o</span>: &#123; <span class=\"attr\">p</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>\n<p>（2）函数参数</p>\n<p>函数参数也属于变量声明，因此不能带有圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[(z)]</span>) </span>&#123; <span class=\"keyword\">return</span> z; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[z,(x)]</span>) </span>&#123; <span class=\"keyword\">return</span> x; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）赋值语句的模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: a &#125;) = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\">([a]) = [<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将整个模式放在圆括号之中，导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\">;[&#123; <span class=\"attr\">p</span>: a &#125;, &#123; <span class=\"attr\">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将一部分模式放在圆括号之中，导致报错。</p>\n<h5 id=\"可以使用圆括号的情况\"><a href=\"#可以使用圆括号的情况\" class=\"headerlink\" title=\"可以使用圆括号的情况\"></a>可以使用圆括号的情况</h5><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[b] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;(&#123; <span class=\"attr\">p</span>: d &#125; = &#123;&#125;) <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;[<span class=\"built_in\">parseInt</span>.prop] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n\n<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code>p</code>，而不是<code>d</code>；第三行语句与第一行语句的性质一致。</p>\n<h5 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h5><p>变量的解构赋值用途很多。</p>\n<p><strong>（1）交换变量的值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">;[x, y] = [y, x]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p><strong>（2）从函数返回多个值</strong></p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tfoo: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tbar: <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example()</span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）函数参数的定义</strong></p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）提取 JSON 数据</strong></p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">\tid: <span class=\"number\">42</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">&quot;OK&quot;</span>,</span><br><span class=\"line\">\tdata: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number)</span><br><span class=\"line\"><span class=\"comment\">// 42, &quot;OK&quot;, [867, 5309]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p><strong>（5）函数参数的默认值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\turl,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t<span class=\"keyword\">async</span> = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tbeforeSend = <span class=\"keyword\">function</span>() &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tcache = <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tcomplete = <span class=\"keyword\">function</span>() &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tcrossDomain = <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t<span class=\"built_in\">global</span> = <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t<span class=\"regexp\">//</span> ... more config</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t&#125; = &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p><strong>（6）遍历 Map 结构</strong></p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;first&quot;</span>, <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;second&quot;</span>, <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(key + <span class=\"string\">&quot; is &quot;</span> + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>（7）输入模块的指定方法</strong></p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;source-map&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2VzNi5ydWFueWlmZW5nLmNvbS8jZG9jcw==\">《ECMAScript 6 入门》<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/ES6%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"ES6语法","slug":"ES6语法","permalink":"https://js-mark.com/tags/ES6%E8%AF%AD%E6%B3%95/"}]},{"title":"聊聊网络中的传输协议","date":"2019-03-25T14:10:48.000Z","path":"网络传输协议/聊聊网络中的传输协议/","content":"<p>一直说写这么一篇文章，可是都没什么时间静下心来整理，最近项目不是很忙，打算抽时间整理整理一些常用的方法，反正慢慢来嘛~~</p>\n<h4 id=\"聊聊网络传输协议\"><a href=\"#聊聊网络传输协议\" class=\"headerlink\" title=\"聊聊网络传输协议\"></a>聊聊网络传输协议</h4><span id=\"more\"></span>\n<p><br/>&emsp;&emsp;网络传输协议，英文全名（Internet communication protocol）又叫互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（英语：TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（英语：TCP/IP Protocol Stack） 。这些协议最早发源于美国国防部（缩写为 DoD）的 ARPA 网项目，因此也被称作 DoD 模型（DoD Model）。这个协议族由互联网工程任务组（IETF）负责维护。<br>&emsp;&emsp;TCP/IP 提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层 OSI 模型。</p>\n<blockquote>\n<p>下图介绍了网络传输协议七层 OSI 模型图以及四层网络协议解构图：</p>\n</blockquote>\n<p><img data-src=\"/assets/img/2019/03/1.png\" alt=\"image\"><img data-src=\"/assets/img/2019/03/2.png\" alt=\"image\"></p>\n<p>它们叫什么名字，其实并不重要。只需要知道，互联网传输协议分成若干层就可以了那么接下来我讲讲这个互联网络中的一些规定协议，这些协议大多都是我们常见的一些：。。。</p>\n<p><img data-src=\"/assets/img/2019/03/3.png\" alt=\"image\"><img data-src=\"/assets/img/2019/03/4.png\" alt=\"image\"><img data-src=\"/assets/img/2019/03/5.png\" alt=\"image\"></p>\n<h4 id=\"http-协议与-tcp-协议的恩怨情仇\"><a href=\"#http-协议与-tcp-协议的恩怨情仇\" class=\"headerlink\" title=\"http 协议与 tcp 协议的恩怨情仇\"></a>http 协议与 tcp 协议的恩怨情仇</h4><h5 id=\"tcp-三次握手和四次挥手\"><a href=\"#tcp-三次握手和四次挥手\" class=\"headerlink\" title=\"tcp 三次握手和四次挥手\"></a>tcp 三次握手和四次挥手</h5><p>讲这个 http 协议协议与 tcp 协议的恩怨情仇，就不得不提 tcp 的三次握手和四次挥手，从上图来看谁让人家是传输层，咱们是应用层呐！下图介绍了关于三次握手和四次挥手的拟人化描述!</p>\n<p><img data-src=\"/assets/img/2019/03/6.png\" alt=\"image\"></p>\n<p>动画介绍三次握手和四次挥手</p>\n<p><img data-src=\"/assets/img/2019/03/7.gif\" alt=\"image\"><img data-src=\"/assets/img/2019/03/8.gif\" alt=\"image\"></p>\n<blockquote>\n<p>先写到这待补充完善！</p>\n</blockquote>\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUJEJTkxJUU3JUJCJTlDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF\">网络传输协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvT1NJJUU2JUE4JUExJUU1JTlFJThC\">OSI 模型 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUI2JTg1JUU2JTk2JTg3JUU2JTlDJUFDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF\">超文本传输协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF\">互联网协议入门（一） - 阮一峰的网络日志<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF\">TCP 协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9TdGF0dXM=\">MDN http 响应代码<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>《图解 HTTP 协议》</li>\n<li>《计算机网络》</li>\n</ul>\n","updated":"2021-04-27T15:09:32.093Z","comments":true,"link":"","permalink":"https://js-mark.com/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/%E8%81%8A%E8%81%8A%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/","categories":[{"name":"网络传输协议","slug":"网络传输协议","permalink":"https://js-mark.com/categories/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"}],"tags":[{"name":"网络传输协议","slug":"网络传输协议","permalink":"https://js-mark.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"},{"name":"TCP/IP协议族","slug":"TCP-IP协议族","permalink":"https://js-mark.com/tags/TCP-IP%E5%8D%8F%E8%AE%AE%E6%97%8F/"},{"name":"HTTP/HTTPS","slug":"HTTP-HTTPS","permalink":"https://js-mark.com/tags/HTTP-HTTPS/"}]},{"title":"命令行配置代理服务","date":"2019-01-29T09:15:16.000Z","path":"系统/命令行配置代理服务/","content":"<ul>\n<li>因为需要通过命令下载国外资源，但在 IE 配置代理后，对 cmd 却没有效果，于是查了下，有配置 cmd 代理的方法。</li>\n</ul>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><span id=\"more\"></span>\n<ul>\n<li>通过设置环境变量来配置代理，一种方式是直接在系统设置中配置（这个就不解释了），另一种方式是在需要时通过 <code>set</code> 命令临时设置。</li>\n<li>控制代理的环境变量分别是 http_proxy、http_proxy_user、http_proxy_pass，不区分大小写，分别代表代理地址（应是 <span class=\"exturl\" data-url=\"aHR0cDovL2lwOnBvcnQ=\">http://ip:port<i class=\"fa fa-external-link-alt\"></i></span> 的形式）、代理用户名、代理密码，一般情况下只需要配置 http_proxy 即可（其余两个参数暂无条件测试，是否有作用未知），参数格式大致如下所示。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http_proxy=http://localhost:1080</span><br><span class=\"line\">http_proxy_user=zhangsan</span><br><span class=\"line\">http_proxy_pass=lisi</span><br><span class=\"line\">通过 <span class=\"built_in\">set</span> 命令的形式大致如下所示。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置参数\"><a href=\"#设置参数\" class=\"headerlink\" title=\"设置参数\"></a>设置参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://localhost:1080</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=zhangsan</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=lisi</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除参数\"><a href=\"#删除参数\" class=\"headerlink\" title=\"删除参数\"></a>删除参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=</span><br></pre></td></tr></table></figure>\n\n<p>另外经测试还有 https_proxy 环境变量可配置，用于配置 https 的代理，如果未配置则将使用 http_proxy 的配置。据此可推测有 https_proxy_user 等参数。</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li>因目前没有环境测试，故以下结论仅根据网上资料整理并推测所得，仅做记录和供参考，详见参考资料。</li>\n<li>据资料得，Linux 配置方式与 Windows 相似，仅命令及配置方式有所不同。</li>\n<li>可配置的环境变量名分别为 http_proxy、https_proxy、ftp_proxy、no_proxy，分别是配置 http 代理、https 代理、ftp 代理、不使用代理的地址，参数格式大致如下所示（正确性有待考察，可能需要加 http:// 前缀），no_proxy 较特殊。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http*proxy=192.168.10.91:3128</span><br><span class=\"line\">https_proxy=192.168.10.91:3128</span><br><span class=\"line\">ftp_proxy=192.168.10.91:3128</span><br><span class=\"line\">no_proxy=<span class=\"string\">&quot;127.0.0.1, localhost, 172.26.*, 172.25.6.66, 192.168.\\_&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 linux 下也有两种配置方式，一是需要在相关系统文件中配置，二是通过 export 命令临时设置，这里不做详细介绍。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Windows 和 Linux 的配置方式大致相同，推测 Windows 也有类似 no_proxy 等的配置，鉴于很少用到，故不做深入研究，需要之时可做尝试。</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZXpsb28uY29tLzIwMDgvMTIvc2V0X2h0dHBfcHJveHkuaHRtbA==\">命令行配置代理服务器<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5meDExNC5uZXQvcWEtMTUtMTUzODY3LmFzcHg=\">为 windows cmd 设置代理<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL2x5bXJnLmJsb2cuNTFjdG8uY29tLzE1NTEzMjcvNDI1NzQ0\">linux 命令行模式下实现代理上网<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5saW51eGRpeWYuY29tL2xpbnV4LzE0MTkxLmh0bWw=\">Ubuntu 设置代理和例外<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","updated":"2021-04-27T15:09:32.093Z","comments":true,"link":"","permalink":"https://js-mark.com/%E7%B3%BB%E7%BB%9F/%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/","categories":[{"name":"系统","slug":"系统","permalink":"https://js-mark.com/categories/%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://js-mark.com/tags/windows/"},{"name":"linux","slug":"linux","permalink":"https://js-mark.com/tags/linux/"}]},{"title":"shell脚本学习","date":"2018-12-24T00:00:00.000Z","path":"系统命令/shell脚本学习/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>为什么学习脚本编写???</li>\n<li>你有没有遇到过这样场景，繁杂并且重复的操作 N 多件~~~</li>\n<li>那么这个时候我们是不是可以想一些其他更快捷、更方便的方法呢！（答案是肯定的，肯定有撒因为我们人类可是很懒的高级哺乳动物）<br><img data-src=\"/assets/img/2018/12/20150424040700733.jpg\" alt=\"image\"><br>好了！那么我们步入今天的正题！<span id=\"more\"></span>\n<h3 id=\"一、shell-中特殊变量\"><a href=\"#一、shell-中特殊变量\" class=\"headerlink\" title=\"一、shell 中特殊变量\"></a>一、shell 中特殊变量</h3></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$0</span>    <span class=\"comment\"># 当前脚本的文件名（间接运行时还包括绝对路径）。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$n</span>    <span class=\"comment\"># 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$#</span>    <span class=\"comment\"># 传递给脚本或函数的参数个数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $*    <span class=\"comment\"># 传递给脚本或函数的所有参数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$@</span>    <span class=\"comment\"># 传递给脚本或函数的所有参数。被双引号 (&quot; &quot;) 包含时，与 $* 不同，下面将会讲到。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $?    <span class=\"comment\"># 上个命令的退出状态，或函数的返回值。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $$    <span class=\"comment\"># 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$_</span>    <span class=\"comment\"># 上一个命令的最后一个参数</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $!    <span class=\"comment\"># 后台运行的最后一个进程的 ID 号</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 现在保存为一个test.sh脚本，然后加上几个参数运行：</span></span><br><span class=\"line\">$ ./test.sh <span class=\"built_in\">test</span> test1 test2 test3 test4</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">./test.sh                      <span class=\"comment\"># $0</span></span><br><span class=\"line\">                               <span class=\"comment\"># $n</span></span><br><span class=\"line\">5                              <span class=\"comment\"># $#</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $*</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $@</span></span><br><span class=\"line\">0                              <span class=\"comment\"># $?</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $$</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $_</span></span><br><span class=\"line\">                               <span class=\"comment\"># $!</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>&emsp;$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号 (“”) 包含时，都以”$1””$2” … “$n” 的形式输出所有参数。<br> &emsp;但是当它们被双引号 (“”) 包含时，”$*”会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@”会将各个参数分开，以”$1””$2” … “$n” 的形式输出所有参数。</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\$*=&quot;</span> $*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\&quot;\\$*\\&quot;=&quot;</span> <span class=\"string\">&quot;$*&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\$@=&quot;</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\&quot;\\$@\\&quot;=&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;print each param from \\$*&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> $*</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;print each param from \\$@&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;从 \\&quot;\\$*\\&quot; 获取并打印每一个参数&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">&quot;$*&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;从 \\&quot;\\$@\\&quot; 获取并打印每一个参数&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>返回结果：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$*= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">&quot;$*&quot;</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"variable\">$@</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from $*</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\">从 <span class=\"string\">&quot;$*&quot;</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\">从 <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"二、手工处理参数\"><a href=\"#二、手工处理参数\" class=\"headerlink\" title=\"二、手工处理参数\"></a>二、手工处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    -a)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -a 选项&quot;</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -b)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -b 选项&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;-b 选项的参数值是：<span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">shift</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -c)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -c 选项&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;-c 选项的参数值是：<span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">shift</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -d)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -d 选项&quot;</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span> is not an option&quot;</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"built_in\">shift</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行：./test.sh -a -b t2 -c t3 -d</span></span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、getopt-处理参数\"><a href=\"#三、getopt-处理参数\" class=\"headerlink\" title=\"三、getopt 处理参数\"></a>三、getopt 处理参数</h3><p>下面 getopt ab:c:d “$@” 中的 abcd 分别代表四个选项，后面带有冒号的表示选项需要参数值。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GETOPTOUT=`getopt ab:c:d <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span>`</span><br><span class=\"line\">  <span class=\"built_in\">set</span> -- <span class=\"variable\">$GETOPTOUT</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    -a)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -a 选项&quot;</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -b)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -b 选项&quot;</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">&quot;-b 选项的参数值是：<span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -c)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -c 选项&quot;</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">&quot;-c 选项的参数值是：<span class=\"variable\">$2</span>&quot;</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -d)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -d 选项&quot;</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    --)</span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      <span class=\"built_in\">break</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">&quot;未知选项:&quot;</span><span class=\"variable\">$1</span><span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"built_in\">shift</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\"> ./proxychains4.sh -a -b t2 -c t3 -d</span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARGV=($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"built_in\">set</span> -- <span class=\"string\">&quot;<span class=\"variable\">$ARGV</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  -短选项1|--长选项1)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  -短选项2|--长选项2)</span><br><span class=\"line\">    <span class=\"comment\"># 获取选项</span></span><br><span class=\"line\">    opt = <span class=\"variable\">$2</span></span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span> 2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... ...</span><br><span class=\"line\"></span><br><span class=\"line\">  -短选项3|--长选项3)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  --)</span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于 eval 这个命令，用一个小例子解释：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo=10</span><br><span class=\"line\">x=foo</span><br><span class=\"line\">y=<span class=\"string\">&#x27;$&#x27;</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$foo</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> y=<span class=\"string\">&#x27;$&#x27;</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span></span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 因为我一般用这个命令连接构建命令参数，所以你可以简单理解为执行两次（虽然不太对）。通过添加 eval 可以把参数解析后再执行。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、getopts-处理参数\"><a href=\"#四、getopts-处理参数\" class=\"headerlink\" title=\"四、getopts 处理参数\"></a>四、getopts 处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">getopts</span> :ab:c:d ARGS</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$ARGS</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  a)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -a 选项&quot;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  b)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -b 选项&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;-b 选项的值是：<span class=\"variable\">$OPTARG</span>&quot;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  c)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -c 选项&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;-c 选项的值是：<span class=\"variable\">$OPTARG</span>&quot;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  d)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;发现 -d 参数&quot;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;未知选项：<span class=\"variable\">$ARGS</span>&quot;</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这种方法最方便简单。接下来基于这种方法深入讲解。</p>\n<h3 id=\"五、传参意外处理\"><a href=\"#五、传参意外处理\" class=\"headerlink\" title=\"五、传参意外处理\"></a>五、传参意外处理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;?&quot;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;未知选项 <span class=\"variable\">$OPTARG</span>&quot;</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\"><span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;没有输入任何选项 <span class=\"variable\">$OPTARG</span>&quot;</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">  <span class=\"comment\"># 发生不能预料的错误时。</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;处理选项时出现未知错误&quot;</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kM2NkMzZjOTdhYmM=\">Shell 脚本传参方法总结<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9saW51eC9sLWJhc2gtcGFyYW1ldGVycy5odG1s\">Bash 参数和参数扩展<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4zNjF3YXkuY29tL3NoZWxsLWdldG9wdC80OTgxLmh0bWw=\">shell中的getopt与getopts<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/","categories":[{"name":"系统命令","slug":"系统命令","permalink":"https://js-mark.com/categories/%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/"}],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"https://js-mark.com/tags/VSCode/"},{"name":"系统底层","slug":"系统底层","permalink":"https://js-mark.com/tags/%E7%B3%BB%E7%BB%9F%E5%BA%95%E5%B1%82/"},{"name":"Shell","slug":"Shell","permalink":"https://js-mark.com/tags/Shell/"},{"name":"脚本操作","slug":"脚本操作","permalink":"https://js-mark.com/tags/%E8%84%9A%E6%9C%AC%E6%93%8D%E4%BD%9C/"}]},{"title":"用掘金－Markdown 编辑器写文章","date":"2018-12-11T12:37:00.000Z","path":"网站应用/掘金文档编辑器使用方法/","content":"<h3 id=\"用掘金－Markdown-编辑器写文章\"><a href=\"#用掘金－Markdown-编辑器写文章\" class=\"headerlink\" title=\"用掘金－Markdown 编辑器写文章\"></a>用掘金－Markdown 编辑器写文章</h3><p>欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。</p>\n<span id=\"more\"></span>\n<h3 id=\"丰富的快捷键\"><a href=\"#丰富的快捷键\" class=\"headerlink\" title=\"丰富的快捷键\"></a>丰富的快捷键</h3><p>本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。</p>\n<p>支持的快捷键有：</p>\n<ul>\n<li>加粗： <code>Ctrl/Cmd + B</code></li>\n<li>标题： <code>Ctrl/Cmd + H</code></li>\n<li>插入链接： <code>Ctrl/Cmd + K</code></li>\n<li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li>\n<li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li>\n<li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li>\n<li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li>\n<li>撤销： <code>Ctrl/Cmd + Z</code></li>\n</ul>\n<h3 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h3><h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><blockquote>\n<p>语法格式：**’#’+’空格’+’文本’**</p>\n</blockquote>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\"></span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\"></span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\"></span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\"></span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\"></span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><blockquote>\n<p>无序列表语法格式：**’-‘ + ‘空格’ ＋ ‘文本’**</p>\n</blockquote>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 文本一</span><br><span class=\"line\">- 文本二</span><br><span class=\"line\">- 文本三</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有序列表语法格式：**’数字’ + ‘.’ + ‘空格’ + ‘文本’**</p>\n</blockquote>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 文本一</span><br><span class=\"line\">2. 文本二</span><br><span class=\"line\">3. 文本三</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>任务列表语法格式：**’-‘ + ‘空格’ + ‘[ ]’ + ‘文本’**</p>\n</blockquote>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [x] 文本一</span><br><span class=\"line\">- [ ] 文本二</span><br><span class=\"line\">- [ ] 文本三</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h4><ul>\n<li>在 Markdown 中插入链接不需要其他按钮，你只需要使用<code>［显示文本］(链接地址)</code>这样的格式语法即可。例如：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2xkLnhpdHUuaW8v\">稀土掘金<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>插入图片的语法与插入链接的语法很像，只是前面多了一个 <code>!</code>.语法如下：<br><code>![图片的标注](图片链接地址)</code></li>\n</ul>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><blockquote>\n<p>语法：**’&gt;’+’空格’+’文本’**</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>如下是代码段的语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;编程语言</span><br><span class=\"line\">这是代码段</span><br><span class=\"line\">&#96;&#96;&#96;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">alist</span>):</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> passnum <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(alist)-<span class=\"number\">1</span>,<span class=\"number\">0</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\"> <span class=\"comment\">#print alist,passnum</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(passnum):</span><br><span class=\"line\"> <span class=\"keyword\">if</span> alist[i]&gt;alist[i+<span class=\"number\">1</span>]:</span><br><span class=\"line\"> temp = alist[i]</span><br><span class=\"line\"> alist[i] = alist[i+<span class=\"number\">1</span>]</span><br><span class=\"line\"> alist[i+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\"> <span class=\"keyword\">return</span> alist</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**Markdown 　 Extra**　表格语法：</span><br><span class=\"line\"></span><br><span class=\"line\">| 项目   | 价格   |</span><br><span class=\"line\">|--------|--------|</span><br><span class=\"line\">| iPhone | \\$560  |</span><br><span class=\"line\">| iPad   | \\$780  |</span><br><span class=\"line\">| iMac   | \\$1000 |</span><br><span class=\"line\"></span><br><span class=\"line\">可以使用冒号来定义对齐方式：</span><br><span class=\"line\"></span><br><span class=\"line\">| 项目   | 价格     | 数量 |</span><br><span class=\"line\">|--------|---------|------|</span><br><span class=\"line\">| iPhone | 6000 元  | 5    |</span><br><span class=\"line\">| iPad   | 3800 元  | 12   |</span><br><span class=\"line\">| iMac   | 10000 元 | 234  |</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBwaW5uLmNvbS9tYXJrZG93bi8=\">Markdown 语法<i class=\"fa fa-external-link-alt\"></i></span>，非常感谢使用<strong>掘金－Markdown 编辑器</strong>,希望为您提供舒适的写作体验。</p>\n","updated":"2021-04-27T15:09:32.093Z","comments":true,"link":"","permalink":"https://js-mark.com/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8/%E6%8E%98%E9%87%91%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","categories":[{"name":"网站应用","slug":"网站应用","permalink":"https://js-mark.com/categories/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"Markdown","slug":"Markdown","permalink":"https://js-mark.com/tags/Markdown/"},{"name":"掘金","slug":"掘金","permalink":"https://js-mark.com/tags/%E6%8E%98%E9%87%91/"}]},{"title":"初探Vue3.0新特性(未完待续)","date":"2018-12-10T12:00:00.000Z","path":"Vue/Vue3.0/","content":"<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n<img\n  width=\"200\"\n  height=\"200\"\n  data-src=\"https://cn.vuejs.org/images/logo.png\"\n  alt=\"Vue\"></a></p>\n\n<blockquote>\n<h3 id=\"初探-Vue3-0-新特性\"><a href=\"#初探-Vue3-0-新特性\" class=\"headerlink\" title=\"初探 Vue3.0 新特性\"></a>初探 Vue3.0 新特性</h3><p>&emsp;“ 我已经学不动了，只有神可以挽救一下我的膝盖—-” 自 2016 年 10 月 1 日 Vue2.0 版本发布以来到目前为止已经将近快两年的时间了。在这两年里，前端领域风云变化，各种框架层出不穷。小程序横空出世，angular 已经迭代到 angular6,从 angular2 开始已经基本上是将 angularjs 推倒重来，蜕变升级。等等。。。在这两年里，我们看到了太多的框架出现和消失，前端框架基本上是 vue react angular 三足鼎立。感谢各位开源大大，是你们推动了整个前端领域的快速发展。<br>&emsp;与此同时，面对一时间涌现的那么多种前端框架，很多小伙伴们都会感觉力不从心，甚至还出现了众多用户到某知名开源项目上留言：“求求你别写了，我们学不动了~~”<br>&emsp;今天，Vue 的主要开发者尤小右在微博上透露了 Vue3.0 的开发计划，快来看看有哪些新改变吧。</p>\n</blockquote>\n<p><img data-src=\"/assets/img/2018/12/vue3.0.png\" alt=\"image\"></p>\n<blockquote>\n<h3 id=\"9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"><a href=\"#9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\" class=\"headerlink\" title=\"9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"></a>9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。</h3><p>1.Virtual DOM 完全重写，mounting &amp; patching 提速  100% ;<br>2.更多编译时（compile-time）提醒以减少 runtime 开销;<br>3.基于 Proxy 观察者机制以满足全语言覆盖及更好的性能;<br>4.放弃 Object.defineProperty ，使用更快的原生 Proxy;<br>5.组件实例初始化速度提高 100％;<br>6.提速一倍/内存使用降低一半。</p>\n</blockquote>\n<span id=\"more\"></span>\n<blockquote>\n<h3 id=\"对于-3-0-的-proxy-特性有必要讲一讲\"><a href=\"#对于-3-0-的-proxy-特性有必要讲一讲\" class=\"headerlink\" title=\"对于 3.0 的 proxy 特性有必要讲一讲\"></a>对于 3.0 的 proxy 特性有必要讲一讲</h3><p>对于这个观察者机制的变更，给我带来的好处简直不言而喻。（我们终于不再担心目前官网上提的那个检测数组/检测对象变更了）</p>\n</blockquote>\n<p>&emsp;不久前，也就是11月14日-16日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 Vue3.0 Updates 的主题演讲，对 Vue3.0 的更新计划、方向进行了详细阐述（感兴趣的小伙伴可以看看完整的 [PPT](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2ds5Yid5o6iLw==\">https://docs.googl初探<i class=\"fa fa-external-link-alt\"></i></span> Vue3.0 新特性e.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)），表示已经放弃使用了 Object.defineProperty，而选择了使用更快的原生 Proxy !!<br>&emsp;这将会消除了之前 Vue2.x 中基于 Object.defineProperty 的实现所存在的很多限制：无法监听 属性的添加和删除、数组索引和长度的变更，并可以支持 Map、Set、WeakMap 和 WeakSet！</p>\n<p><img data-src=\"/assets/img/2018/12/1.png\" alt=\"image\"><br><img data-src=\"/assets/img/2018/12/2.png\" alt=\"image\"></p>\n<blockquote>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3></blockquote>\n<p>最后期待，2019年的VUE3.0的发布，来让前端开发更便捷，更cool！<br>参考文献：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmZjYmFiMDUxODgyNTc0MWU3YmQ2N2Y=\">初探 Vue3.0 中的一大亮点——Proxy !<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvazZPaE1OcnBhZ3RUbWJoa1ctdG1aZw==\">重磅！尤雨溪发布Vue 3.0开发路线<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMXloUEd5aFFySmNwSkkyWkZ2Qm1lM3BHS2FHTmlMaTcwOWMzN3N2aXZ2MG8vZWRpdD91c3A9c2hhcmluZw==\">尤大大的PPT(需要翻墙下载)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHk=\">Proxy MDN<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/Vue/Vue3.0/","categories":[{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/categories/Vue/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/tags/Vue/"}]},{"title":"eslint-vscode-setting","date":"2018-11-30T00:00:00.000Z","path":"JavaScript/eslint-vscode-setting/","content":"<blockquote>\n<h2 id=\"第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\"><a href=\"#第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\" class=\"headerlink\" title=\"第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\"></a>第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue</h2></blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<blockquote>\n<h2 id=\"第二步：在任意目录放置-eslintrc-js\"><a href=\"#第二步：在任意目录放置-eslintrc-js\" class=\"headerlink\" title=\"第二步：在任意目录放置.eslintrc.js\"></a>第二步：在任意目录放置.eslintrc.js</h2><h2 id=\"第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\"><a href=\"#第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\" class=\"headerlink\" title=\"第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\"></a>第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur</h2><h2 id=\"第四步：在-vscode-中的配置\"><a href=\"#第四步：在-vscode-中的配置\" class=\"headerlink\" title=\"第四步：在 vscode 中的配置\"></a>第四步：在 vscode 中的配置</h2></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eslint config start</span></span><br><span class=\"line\"><span class=\"string\">&quot;eslint.autoFixOnSave&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint.options&quot;</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;configFile&quot;</span>: <span class=\"string\">&quot;C:/Users/Mark/.eslint/.eslintrc.js&quot;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">&quot;eslint.validate&quot;</span>: [</span><br><span class=\"line\">\t<span class=\"string\">&quot;javascript&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;javascriptreact&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;html&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;vue&quot;</span>,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;language&quot;</span>: <span class=\"string\">&quot;vue&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;autoFix&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"string\">&quot;vetur.format.options.tabSize&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;vetur.format.options.useTabs&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;vetur.format.defaultFormatterOptions&quot;</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;prettier&quot;</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Prettier option here</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;semi&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;tabWidth&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;useTabs&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;singleQuote&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;prettyhtml&quot;</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;printWidth&quot;</span>: <span class=\"number\">100</span>, <span class=\"comment\">// No line exceeds 100 characters</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;singleQuote&quot;</span>: <span class=\"literal\">false</span> <span class=\"comment\">// Prefer double quotes over single quotes</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// prettier 格式化配置</span></span><br><span class=\"line\"><span class=\"string\">&quot;prettier.tabWidth&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;prettier.useTabs&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;prettier.singleQuote&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;prettier.semi&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;stylusSupremacy.insertColons&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入冒号</span></span><br><span class=\"line\"><span class=\"string\">&quot;stylusSupremacy.insertSemicolons&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入分好</span></span><br><span class=\"line\"><span class=\"string\">&quot;stylusSupremacy.insertBraces&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入大括号</span></span><br><span class=\"line\"><span class=\"string\">&quot;stylusSupremacy.insertNewLineAroundImports&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// import之后是否换行</span></span><br><span class=\"line\"><span class=\"string\">&quot;stylusSupremacy.insertNewLineAroundBlocks&quot;</span>: <span class=\"literal\">false</span>,</span><br></pre></td></tr></table></figure>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/eslint-vscode-setting/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"VSCode","slug":"VSCode","permalink":"https://js-mark.com/tags/VSCode/"},{"name":"ESLint","slug":"ESLint","permalink":"https://js-mark.com/tags/ESLint/"}]},{"title":"DayJs使用","date":"2018-11-30T00:00:00.000Z","path":"JavaScript/DayJs/","content":"<p align=\"center\">\n    <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img width=\"550\" data-src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\">\n    </a>\n</p>\n<p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p>\n<span id=\"more\"></span>\n<br>\n<p align=\"center\">\n    <a href=\"https://unpkg.com/dayjs/dayjs.min.js\">\n        <img\n            data-src=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\"\n            alt=\"Gzip Size\">\n    </a>\n    <a href=\"https://www.npmjs.com/package/dayjs\"><img data-src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"></a>\n    <a href=\"https://travis-ci.org/iamkun/dayjs\">\n        <img data-src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\">\n    </a>\n    <a href=\"https://codecov.io/gh/iamkun/dayjs\">\n        <img data-src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\">\n    </a>\n    <a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\">\n        <img data-src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a>\n    <br>\n    <a href=\"https://saucelabs.com/u/dayjs\">\n        <img width=\"750\" data-src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\">\n    </a>\n</p>\n\n<blockquote>\n<p>Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs()</span><br><span class=\"line\">  .startOf(<span class=\"string\">&quot;month&quot;</span>)</span><br><span class=\"line\">  .add(<span class=\"number\">1</span>, <span class=\"string\">&quot;day&quot;</span>)</span><br><span class=\"line\">  .set(<span class=\"string\">&quot;year&quot;</span>, <span class=\"number\">2018</span>)</span><br><span class=\"line\">  .format(<span class=\"string\">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>🕒 和 Moment.js 相同的 API 和用法</li>\n<li>💪 不可变数据 (Immutable)</li>\n<li>🔥 支持链式操作 (Chainable)</li>\n<li>🌐 国际化 I18n</li>\n<li>📦 仅 2kb 大小的微型库</li>\n<li>👫 全浏览器兼容</li>\n</ul>\n<hr>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install dayjs --save</span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./Installation.md\">安装指南</a></p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Day.js 有很多 API 来解析、处理、校验、增减、展示时间和日期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs(<span class=\"string\">&quot;2018-08-08&quot;</span>); <span class=\"comment\">// 解析</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">&quot;&#123;YYYY&#125; MM-DDTHH:mm:ss SSS [Z] A&quot;</span>); <span class=\"comment\">// 展示</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs()</span><br><span class=\"line\">  .set(<span class=\"string\">&quot;month&quot;</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  .month(); <span class=\"comment\">// 获取</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().add(<span class=\"number\">1</span>, <span class=\"string\">&quot;year&quot;</span>); <span class=\"comment\">// 处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().isBefore(dayjs()); <span class=\"comment\">// 查询</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./API-reference.md\">API 参考</a></p>\n<h3 id=\"国际化-I18n\"><a href=\"#国际化-I18n\" class=\"headerlink\" title=\"国际化 I18n\"></a>国际化 I18n</h3><p>Day.js 支持国际化</p>\n<p>但除非手动加载，多国语言默认是不会被打包到工程里的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;dayjs/locale/es&quot;</span>; <span class=\"comment\">// 按需加载</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.locale(<span class=\"string\">&quot;es&quot;</span>); <span class=\"comment\">// 全局使用西班牙语</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs(<span class=\"string\">&quot;2018-05-05&quot;</span>)</span><br><span class=\"line\">  .locale(<span class=\"string\">&quot;zh-cn&quot;</span>)</span><br><span class=\"line\">  .format(); <span class=\"comment\">// 在这个实例上使用简体中文</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./I18n.md\">国际化 I18n</a></p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> advancedFormat <span class=\"keyword\">from</span> <span class=\"string\">&quot;dayjs/plugin/advancedFormat&quot;</span>; <span class=\"comment\">// 按需加载插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.extend(advancedFormat); <span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">&quot;Q Do k kk X x&quot;</span>); <span class=\"comment\">// 使用扩展后的API</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./Plugin.md\">插件列表</a></p>\n<h2 id=\"开源协议\"><a href=\"#开源协议\" class=\"headerlink\" title=\"开源协议\"></a>开源协议</h2><p>Day.js 遵循 <a href=\"../../LICENSE\">MIT 开源协议</a>.</p>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/DayJs/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"JS时间处理","slug":"JS时间处理","permalink":"https://js-mark.com/tags/JS%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"}]},{"title":"Vue二维码组件","date":"2018-03-12T16:30:00.000Z","path":"Vue/vueqr-new/","content":"<h1 id=\"vue-components\"><a href=\"#vue-components\" class=\"headerlink\" title=\"vue components\"></a>vue components</h1><p><a href=\"https://www.npmjs.com/package/vueqr-new\"><img data-src=\"https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://www.npmjs.com/package/vueqr-new\"><img data-src=\"https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://github.com/Jack-In/vueQr-new/master/license\"><img data-src=\"https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a></p>\n<blockquote>\n<h3 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a>快速安装</h3></blockquote>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>快速添加 <code>vueqr-new</code> 组件到 app 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vueqr-new</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vue-qr</span> <span class=\"attr\">:config</span>=<span class=\"string\">&quot;config&quot;</span> <span class=\"attr\">:text</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">vue-qr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> vueQr <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vueqr-new&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> config = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 容错等级</span></span></span><br><span class=\"line\"><span class=\"javascript\">  errorCorrectionLevel: <span class=\"string\">&#x27;H&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 图片类型</span></span></span><br><span class=\"line\"><span class=\"javascript\">  type: <span class=\"string\">&#x27;image/png&#x27;</span>,</span></span><br><span class=\"line\">  rendererOpts: &#123;</span><br><span class=\"line\">  quality: 0.3</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 边框与二维码之间的间距</span></span></span><br><span class=\"line\">  margin: 0,</span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 缩放倍数</span></span></span><br><span class=\"line\">  scale: 4,</span><br><span class=\"line\">  width: 500,</span><br><span class=\"line\">  maskPattern:1,</span><br><span class=\"line\">  color: &#123;</span><br><span class=\"line\"><span class=\"javascript\">  dark: <span class=\"string\">&#x27;#000000&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  light : <span class=\"string\">&quot;#ffffff&quot;</span></span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  style: &#123;</span><br><span class=\"line\"><span class=\"javascript\">  width: <span class=\"string\">&#x27;128px&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  border: <span class=\"string\">&#x27;1px solid #ccc&#x27;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      text: <span class=\"string\">&#x27;https://example.com&#x27;</span>,</span></span><br><span class=\"line\">      config: config</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    vueQr</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Component-props\"><a href=\"#Component-props\" class=\"headerlink\" title=\"Component props\"></a>Component props</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>属性描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>config</td>\n<td>Object</td>\n<td>qrcode option</td>\n</tr>\n<tr>\n<td>text</td>\n<td>String</td>\n<td>qrcode value</td>\n</tr>\n</tbody></table>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3pwYW8vcXJjb2RlLnJlYWN0\">“node-qrcode”<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3></blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phY2stSW4vdnVlUXItbmV3L2Jsb2IvbWFzdGVyL0xJQ0VOU0U=\">MIT<i class=\"fa fa-external-link-alt\"></i></span></p>\n","updated":"2021-04-27T15:09:32.093Z","comments":true,"link":"","permalink":"https://js-mark.com/Vue/vueqr-new/","categories":[{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/categories/Vue/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/tags/Vue/"}]},{"title":"Vuex 状态管理插件学习","date":"2018-03-12T16:16:16.000Z","path":"Vue/Vuex/","content":"<h1 id=\"Vue-状态管理插件学习\"><a href=\"#Vue-状态管理插件学习\" class=\"headerlink\" title=\"Vue 状态管理插件学习\"></a>Vue 状态管理插件学习</h1><ul>\n<li><p>vuex vue 提供的数据状态管理插件（俗称数据共享中心）</p>\n</li>\n<li><p>state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）</p>\n</li>\n<li><p>获取仓库中定义值的方法</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;&#123;$store.state.定义的属性&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用计算属性</span></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">count</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.定义的属性</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<ul>\n<li>3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6写法</span></span><br><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>等同于</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.count</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>4.mapState 扩展使用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([<span class=\"string\">&#x27;在state中定义的属性&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\">// 这个会根据你定义的属性名绑定到vue实例上</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>5.mutations 提交更改仓库中定义值的方法（修改状态）</li>\n<li>使用$store.commit(‘调用定义在 mutations 中定义的方法名’，要传递给调用方法的参数)</li>\n<li>获取状态管理器中定义的方法(mutations)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个加的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">\t\tstate.count++</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个减的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">reduce</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">\t\tstate.count--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">// 在vue中使用import导入辅助函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState, mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: mapMutations([<span class=\"string\">&#x27;add&#x27;</span>, <span class=\"string\">&#x27;reduce&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">methods: mapMutations([(countAdd: <span class=\"string\">&#x27;add&#x27;</span>), (countReauce: <span class=\"string\">&#x27;reduce&#x27;</span>)])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>6.vuex 中的计算属性（过滤属性）getters</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  count:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 或者</span></span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState,mapMutations,mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">computed: mapGetters(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>7.vuex 中的 actions，异步提交方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// context：上下文对象，这里你可以理解称store本身。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">addAction</span>(<span class=\"params\">context</span>)</span> &#123;</span><br><span class=\"line\">\t\tcontext.commit(<span class=\"string\">&#x27;add&#x27;</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;commit&#125;：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">reduceAction</span>(<span class=\"params\">&#123; commit &#125;</span>)</span> &#123;</span><br><span class=\"line\">\t\tcommit(<span class=\"string\">&#x27;reduce&#x27;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>8.module 模块组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleA=&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">modules: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//模块别名:模块名，记得要使用import引入模块</span></span><br><span class=\"line\">\ta:moduleA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用模块值和方法</span></span><br><span class=\"line\">和以上的使用方法一样，只不过前边加一个模块别名</span><br></pre></td></tr></table></figure>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/Vue/Vuex/","categories":[{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/categories/Vue/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://js-mark.com/tags/JS/"},{"name":"vue","slug":"vue","permalink":"https://js-mark.com/tags/vue/"},{"name":"vuex","slug":"vuex","permalink":"https://js-mark.com/tags/vuex/"}]},{"title":"Typora For Markdown 语法","date":"2018-03-12T00:00:00.000Z","path":"软件工具/typora/","content":"<p>#Typora For Markdown 语法</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3hpYW5iYWkubWUvbGVhcm4tbWQvaW5kZXguaHRtbA==\">Learning-Markdown (Markdown 入门参考)<i class=\"fa fa-external-link-alt\"></i></span><br>[TOC]</p>\n<p>###数学表达式</p>\n<p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹 Tex 命令，例如：<code>$lim_&#123;x \\to \\infty&#125; \\ exp(-x)=0$</code>将产生如下的数学表达式：</p>\n<p>$\\lim_{x \\to \\infty} \\exp(-x)=0$</p>\n<span id=\"more\"></span>\n<p>###下标</p>\n<p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生 H<del>2</del>O, 即水的分子式。</p>\n<p>###上标</p>\n<p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式 y^2^ = 4</p>\n<p>###插入表情:happy:</p>\n<p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>用 HTML 的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>GFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>使用`包裹的内容将会以代码样式显示，例如</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用&#96;printf()&#96;</span><br></pre></td></tr></table></figure>\n\n<p>则会产生<code>printf()</code>样式。</p>\n<ul>\n<li><p>输入<code>~~~</code>或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：</p>\n</li>\n<li><pre><code>​```java\npublic Class HelloWorld&#123;\n  System.out.println(&quot;Hello World!&quot;);\n&#125;\n​```\n</code></pre>\n<p>将会产生</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><p>使用两个*号或者两个_包裹的内容将会被强调。例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**使用两个*号强调内容**</span><br><span class=\"line\">__使用两个下划线强调内容__</span><br></pre></td></tr></table></figure>\n\n<p>将会输出</p>\n<p><strong>使用两个*号强调内容</strong><br><strong>使用两个下划线强调内容</strong><br>Typroa 推荐使用两个*号。</p>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><p>在标准的 Markdown 语法中，*和_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\*</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><p>我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。</p>\n<p><img data-src=\"http://typora.io/img/drag-img.gif\" alt=\"drag and drop image\"></p>\n<p>​</p>\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"插入-URL-连接\"><a href=\"#插入-URL-连接\" class=\"headerlink\" title=\"插入 URL 连接\"></a>插入 URL 连接</h3><p>使用尖括号包裹的 url 将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:&lt;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20mZ3Q7Lw==\">www.baidu.com&gt;<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<p>如果是标准的 url，则会自动产生连接，例如:<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29tLw==\">www.google.com<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"目录列表-Table-of-Contents（TOC）\"><a href=\"#目录列表-Table-of-Contents（TOC）\" class=\"headerlink\" title=\"目录列表 Table of Contents（TOC）\"></a>目录列表 Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p>\n<h3 id=\"水平分割线\"><a href=\"#水平分割线\" class=\"headerlink\" title=\"水平分割线\"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p>\n<hr>\n<h3 id=\"标注\"><a href=\"#标注\" class=\"headerlink\" title=\"标注\"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某些人用过了才知道[^注释]</span><br><span class=\"line\">[^注释]:Somebody that I used to know.</span><br></pre></td></tr></table></figure>\n\n<p>将产生：</p>\n<p>某些人用过了才知道[^注释]<br>[^注释]: Somebody that I used to know.</p>\n<p>把鼠标放在<code>注释</code>上，将会有提示内容。</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|姓名|性别|毕业学校|工资|</span><br><span class=\"line\">|:---|:---:|:---:|---:|</span><br><span class=\"line\">|杨洋|男|重庆交通大学|3200|</span><br><span class=\"line\">|峰哥|男|贵州大学|5000|</span><br><span class=\"line\">|坑货|女|北京大学|2000|</span><br></pre></td></tr></table></figure>\n\n<p>将产生:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">姓名</th>\n<th align=\"center\">性别</th>\n<th align=\"center\">毕业学校</th>\n<th align=\"right\">工资</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">杨洋</td>\n<td align=\"center\">男</td>\n<td align=\"center\">重庆交通大学</td>\n<td align=\"right\">3200</td>\n</tr>\n<tr>\n<td align=\"left\">峰哥</td>\n<td align=\"center\">男</td>\n<td align=\"center\">贵州大学</td>\n<td align=\"right\">5000</td>\n</tr>\n<tr>\n<td align=\"left\">坑货</td>\n<td align=\"center\">女</td>\n<td align=\"center\">北京大学</td>\n<td align=\"right\">2000</td>\n</tr>\n</tbody></table>\n<p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p>\n<h3 id=\"数学表达式块\"><a href=\"#数学表达式块\" class=\"headerlink\" title=\"数学表达式块\"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 &#x3D;  \\begin&#123;vmatrix&#125; \\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$$</span><br></pre></td></tr></table></figure>\n\n<p>将会产生:</p>\n<p>$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}$$</p>\n<h3 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [ ] 吃饭</span><br><span class=\"line\">- [ ] 逛街</span><br><span class=\"line\">- [ ] 看电影</span><br><span class=\"line\">- [ ] 约泡</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\">  吃饭</p>\n<pre><code>​\n</code></pre>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\">  逛街</p>\n<pre><code>​\n</code></pre>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\">  看电影</p>\n<pre><code>​\n</code></pre>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\">  约泡</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**无序的列表**</span><br><span class=\"line\">* tfboys</span><br><span class=\"line\">* 杨洋</span><br><span class=\"line\">* 我爱你</span><br></pre></td></tr></table></figure>\n\n<p><strong>无序的列表</strong></p>\n<ul>\n<li>tfboys</li>\n<li>杨洋</li>\n<li>我爱你</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**有序的列表**</span><br><span class=\"line\">1. 苹果</span><br><span class=\"line\">6. 香蕉</span><br><span class=\"line\">10. 我都不喜欢</span><br></pre></td></tr></table></figure>\n\n<p><strong>有序的列表</strong></p>\n<ol>\n<li>苹果</li>\n<li>香蕉</li>\n<li>我都不喜欢</li>\n</ol>\n<h3 id=\"块引用\"><a href=\"#块引用\" class=\"headerlink\" title=\"块引用\"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;这是一个块引用！</span><br></pre></td></tr></table></figure>\n\n<p>将产生：</p>\n<blockquote>\n<p>这是一个块引用！</p>\n</blockquote>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。</p>\n","updated":"2021-04-27T15:09:32.093Z","comments":true,"link":"","permalink":"https://js-mark.com/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/typora/","categories":[{"name":"软件工具","slug":"软件工具","permalink":"https://js-mark.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"Markdown","slug":"Markdown","permalink":"https://js-mark.com/tags/Markdown/"}]},{"title":"Webpack打包工具总结","date":"2017-12-29T01:01:16.000Z","path":"JavaScript/Webpack/","content":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><ul>\n<li>安装 webpack</li>\n<li>配置 webpack.config.js<blockquote>\n<p>官方教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2Mud2VicGFjay1jaGluYS5vcmcvY29uZmlndXJhdGlvbi8jLQ==\">https://doc.webpack-china.org/configuration/#-<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: <span class=\"string\">&#x27;./foo.js&#x27;</span>,</span><br><span class=\"line\">\t\toutput: &#123;</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">&#x27;foo.bundle.js&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:</span><br><span class=\"line\">\t\trules: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">\t\t\t\tuse: <span class=\"string\">&#x27;babel-loader&#x27;</span>，</span><br><span class=\"line\">\t\t\t\tinclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">&quot;app&quot;</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\texclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">&quot;app/demo-files&quot;</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// test 和 include 具有相同的作用，都是必须匹配选项</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// exclude 是必不匹配选项（优先于 test 和 include）</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 最佳实践：</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 只在 test 和 文件名匹配 中使用正则表达式</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 在 include 和 exclude 中使用绝对路径数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 尽量避免 exclude，更倾向于使用 include</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> (webpack.optimize.UglifyJsPlugin)</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(template: <span class=\"string\">&#x27;./src/index.html&#x27;</span>)</span><br><span class=\"line\">\t  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<ul>\n<li>模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,</li>\n<li>Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：<br>在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm install --save-dev html-webpack-plugin</span></span><br><span class=\"line\"><span class=\"comment\">// 在webpack.config.js中配置：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">\t\tprint: <span class=\"string\">&#x27;./src/print.js&#x27;</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> cleanWebpackPlugin([<span class=\"string\">&#x27;dist&#x27;</span>]), <span class=\"comment\">//数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\t\t\ttitle: <span class=\"string\">&#x27;页面标题&#x27;</span>, <span class=\"comment\">//生成页面标题</span></span><br><span class=\"line\">\t\t\tfilename: <span class=\"string\">&#x27;index.html&#x27;</span>, <span class=\"comment\">//要生成的文件名</span></span><br><span class=\"line\">\t\t\ttemplate: <span class=\"string\">&#x27;index.html&#x27;</span> <span class=\"comment\">//要生成页面的时候的模板</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput: &#123;</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JSon 文件中不能以有注释</li>\n<li>使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;webpack-dev-server --inline --hot --open --port 3000&quot;</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm run dev</span></span><br><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;webpack-dev-server --inline --hot --open --port 3000&quot;</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm start</span></span><br><span class=\"line\"><span class=\"comment\">// 如果键名是start，可以省略写run</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;webpack-dev-server --inline --hot --open --port 3000&quot;</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,<span class=\"comment\">//忽略目录</span></span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！</li>\n<li>解析文件的话，要去下载各种文件类型的 loader</li>\n<li>webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了</li>\n<li>package.json 对象中最后一个参数项，不能书写逗号</li>\n</ul>\n<h3 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3><ul>\n<li>（command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思</li>\n<li>vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具</li>\n</ul>\n<h3 id=\"打包的工程目录中-src-源码所在文件，dist-发布的目录\"><a href=\"#打包的工程目录中-src-源码所在文件，dist-发布的目录\" class=\"headerlink\" title=\"打包的工程目录中 src 源码所在文件，dist 发布的目录\"></a>打包的工程目录中 src 源码所在文件，dist 发布的目录</h3>","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/Webpack/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://js-mark.com/tags/JS/"},{"name":"Webpack3.10","slug":"Webpack3-10","permalink":"https://js-mark.com/tags/Webpack3-10/"},{"name":"语法","slug":"语法","permalink":"https://js-mark.com/tags/%E8%AF%AD%E6%B3%95/"}]},{"title":"JavaScript模块化语法总结","date":"2017-12-29T00:28:16.000Z","path":"JavaScript/JavaScript-modules/","content":"<h1 id=\"CommonJS-服务端模块化规范\"><a href=\"#CommonJS-服务端模块化规范\" class=\"headerlink\" title=\"CommonJS 服务端模块化规范\"></a>CommonJS 服务端模块化规范</h1><h1 id=\"AMD-CMD-浏览器（客户端）模块化规范\"><a href=\"#AMD-CMD-浏览器（客户端）模块化规范\" class=\"headerlink\" title=\"AMD/CMD 浏览器（客户端）模块化规范\"></a>AMD/CMD 浏览器（客户端）模块化规范</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;math&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>\n<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p>\n<h3 id=\"AMD-规范的模块化插件（require-js-和-curl-js）\"><a href=\"#AMD-规范的模块化插件（require-js-和-curl-js）\" class=\"headerlink\" title=\"AMD 规范的模块化插件（require.js 和 curl.js）\"></a>AMD 规范的模块化插件（require.js 和 curl.js）</h3><p>使用的是 require 导入模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&#x27;jquery&#x27;</span>, <span class=\"string\">&#x27;underscore&#x27;</span>, <span class=\"string\">&#x27;backbone&#x27;</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _, Backbone</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"comment\">// some code here</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">       baseUrl:<span class=\"string\">&#x27;js/lib&#x27;</span>,<span class=\"comment\">//放置公共路径</span></span><br><span class=\"line\">　　　　paths: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　<span class=\"string\">&quot;jquery&quot;</span>: <span class=\"string\">&quot;jquery.min&quot;</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">&quot;underscore&quot;</span>: <span class=\"string\">&quot;underscore.min&quot;</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">&quot;backbone&quot;</span>: <span class=\"string\">&quot;backbone.min&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AMD-模块规范写法\"><a href=\"#AMD-模块规范写法\" class=\"headerlink\" title=\"AMD 模块规范写法\"></a>AMD 模块规范写法</h3><ul>\n<li>五、AMD 模块的写法</li>\n</ul>\n<p>require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。</p>\n<p>具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在<code>define()</code>函数之中。</p>\n<p>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    add: add</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;); <span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载方法如下：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&quot;math&quot;</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">math</span>) </span>&#123;</span><br><span class=\"line\">  alert(math.add(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/JavaScript-modules/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"模块化","slug":"模块化","permalink":"https://js-mark.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"},{"name":"规范","slug":"规范","permalink":"https://js-mark.com/tags/%E8%A7%84%E8%8C%83/"},{"name":"JS","slug":"JS","permalink":"https://js-mark.com/tags/JS/"}]},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript的版本是怎么回事？「译」","date":"2015-09-22T00:00:00.000Z","path":"JavaScript/JavaScript的版本是怎么回事/","content":"<p>JavaScript 有着很奇怪的命名史。</p>\n<p>1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript <em>（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）</em></p>\n<span id=\"more\"></span>\n<p><img data-src=\"/assets/img/2015/09/javascript-java.jpg\" alt=\"java-javascript\"><br><small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small></p>\n<blockquote>\n<p>译者注：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmF2YVNjcmlwdCNIaXN0b3J5\">wikipedia 的 JavaScript 词条<i class=\"fa fa-external-link-alt\"></i></span> 更详细的叙述了这段历史</p>\n</blockquote>\n<p>1996 年，网景将 JavaScript 提交给 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnLw==\">ECMA International（欧洲计算机制造商协会）<i class=\"fa fa-external-link-alt\"></i></span> 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。</p>\n<blockquote>\n<p>术语（译者注）：</p>\n<ul>\n<li>_标准（Standard）_： 用于定义与其他事物区别的一套规则</li>\n<li>_实现（Implementation）_： 某个标准的具体实施/真实实践</li>\n</ul>\n</blockquote>\n<p>不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。</p>\n<blockquote>\n<p>译者注：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRUNNQVNjcmlwdCM0dGhfRWRpdGlvbl8uMjhhYmFuZG9uZWQuMjk=\">ECMAScript 第四版草案<i class=\"fa fa-external-link-alt\"></i></span>由于太过激进而被抛弃，Adobe 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQWN0aW9uU2NyaXB0\">ActionScript 3.0<i class=\"fa fa-external-link-alt\"></i></span> 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）</p>\n</blockquote>\n<p>到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）</p>\n<p>目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3d5Y2F0cy9qYXZhc2NyaXB0LWRlY29yYXRvcnM=\">decorators（装饰者）<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2x1a2Vob2Jhbi9lY21hc2NyaXB0LWFzeW5jYXdhaXQ=\">async-await（async-await 异步编程模型）<i class=\"fa fa-external-link-alt\"></i></span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plZmZtby9lcy1jbGFzcy1wcm9wZXJ0aWVz\">static class properties（静态类属性）<i class=\"fa fa-external-link-alt\"></i></span>。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvdXNhZ2UvZXhwZXJpbWVudGFsLw==\">Babel 的官网<i class=\"fa fa-external-link-alt\"></i></span> 上查看各个提案目前都在哪个阶段了。</p>\n<p>所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：</p>\n<ul>\n<li><strong>ECMAScript</strong>：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>\n<li><strong>JavaScript</strong>：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>\n<li>**ECMAScript 5 (ES5)**：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>\n<li>**ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)**：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<span class=\"exturl\" data-url=\"aHR0cDovL2thbmdheC5naXRodWIuaW8vY29tcGF0LXRhYmxlL2VzNi8=\">这张兼容性表<i class=\"fa fa-external-link-alt\"></i></span>来查看不同浏览器和工具的实现情况。</li>\n<li><strong>ECMAScript 2016</strong>：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定</li>\n<li><strong>ECMAScript Proposals</strong>：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>\n</ul>\n<p>在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。</p>\n<h4 id=\"一些资源\"><a href=\"#一些资源\" class=\"headerlink\" title=\"一些资源\"></a>一些资源</h4><ul>\n<li>TC39 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYTI2Mg==\">Github 仓库<i class=\"fa fa-external-link-alt\"></i></span>上可以看到所有目前公开的提案</li>\n<li>如果你还不熟悉 ES6，Babel 有一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvbGVhcm4tZXMyMDE1Lw==\">很不错的特性概览<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 <span class=\"exturl\" data-url=\"aHR0cDovL2V4cGxvcmluZ2pzLmNvbS8=\">Exploring ES6<i class=\"fa fa-external-link-alt\"></i></span>和 Nicholas Zakas 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFucHViLmNvbS91bmRlcnN0YW5kaW5nZXM2\">Understanding ECMAScript 6<i class=\"fa fa-external-link-alt\"></i></span>。Axel 的博客 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4yYWxpdHkuY29tLw==\">2ality<i class=\"fa fa-external-link-alt\"></i></span> 也是很不错的 ES6 资源</li>\n</ul>\n<img class=\"shadow\" width=\"320\" data-src=\"/assets/img/2015/09/keep-calm-and-learn-javascript.png\" />\n<small class=\"img-hint\">来学 JavaScript 吧！</small>\n\n<h4 id=\"著作权声明\"><a href=\"#著作权声明\" class=\"headerlink\" title=\"著作权声明\"></a>著作权声明</h4><p>本文译自 <span class=\"exturl\" data-url=\"aHR0cDovL2Jlbm1jY29ybWljay5vcmcvMjAxNS8wOS8xNC9lczUtZXM2LWVzMjAxNi1lcy1uZXh0LXdoYXRzLWdvaW5nLW9uLXdpdGgtamF2YXNjcmlwdC12ZXJzaW9uaW5nLw==\">ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?<i class=\"fa fa-external-link-alt\"></i></span><br>译者 <span class=\"exturl\" data-url=\"aHR0cDovL3dlaWJvLmNvbS9odXhwcm8=\">黄玄<i class=\"fa fa-external-link-alt\"></i></span>，首次发布于 <span class=\"exturl\" data-url=\"aHR0cDovL2h1YW5neHVhbi5tZS8=\">Hux Blog<i class=\"fa fa-external-link-alt\"></i></span>，转载请保留以上链接</p>\n","updated":"2021-04-27T15:09:32.085Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/JavaScript%E7%9A%84%E7%89%88%E6%9C%AC%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"翻译","slug":"翻译","permalink":"https://js-mark.com/tags/%E7%BF%BB%E8%AF%91/"}]}],"categories":[{"name":"前端面试","slug":"前端面试","permalink":"https://js-mark.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"},{"name":"多人协作开发","slug":"多人协作开发","permalink":"https://js-mark.com/categories/%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91/"},{"name":"SSH","slug":"SSH","permalink":"https://js-mark.com/categories/SSH/"},{"name":"git操作","slug":"git操作","permalink":"https://js-mark.com/categories/git%E6%93%8D%E4%BD%9C/"},{"name":"Mac","slug":"Mac","permalink":"https://js-mark.com/categories/Mac/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"},{"name":"网络传输协议","slug":"网络传输协议","permalink":"https://js-mark.com/categories/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"},{"name":"系统","slug":"系统","permalink":"https://js-mark.com/categories/%E7%B3%BB%E7%BB%9F/"},{"name":"系统命令","slug":"系统命令","permalink":"https://js-mark.com/categories/%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/"},{"name":"网站应用","slug":"网站应用","permalink":"https://js-mark.com/categories/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8/"},{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/categories/Vue/"},{"name":"软件工具","slug":"软件工具","permalink":"https://js-mark.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"面试题","slug":"面试题","permalink":"https://js-mark.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"name":"Javascript","slug":"Javascript","permalink":"https://js-mark.com/tags/Javascript/"},{"name":"git 多人协作开发","slug":"git-多人协作开发","permalink":"https://js-mark.com/tags/git-%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91/"},{"name":"git","slug":"git","permalink":"https://js-mark.com/tags/git/"},{"name":"全栈开发","slug":"全栈开发","permalink":"https://js-mark.com/tags/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/"},{"name":"SSH","slug":"SSH","permalink":"https://js-mark.com/tags/SSH/"},{"name":"sourceTree","slug":"sourceTree","permalink":"https://js-mark.com/tags/sourceTree/"},{"name":"Mac","slug":"Mac","permalink":"https://js-mark.com/tags/Mac/"},{"name":"软件","slug":"软件","permalink":"https://js-mark.com/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"stylus","slug":"stylus","permalink":"https://js-mark.com/tags/stylus/"},{"name":"css","slug":"css","permalink":"https://js-mark.com/tags/css/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"NPM","slug":"NPM","permalink":"https://js-mark.com/tags/NPM/"},{"name":"NodeJs","slug":"NodeJs","permalink":"https://js-mark.com/tags/NodeJs/"},{"name":"ES6语法","slug":"ES6语法","permalink":"https://js-mark.com/tags/ES6%E8%AF%AD%E6%B3%95/"},{"name":"网络传输协议","slug":"网络传输协议","permalink":"https://js-mark.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"},{"name":"TCP/IP协议族","slug":"TCP-IP协议族","permalink":"https://js-mark.com/tags/TCP-IP%E5%8D%8F%E8%AE%AE%E6%97%8F/"},{"name":"HTTP/HTTPS","slug":"HTTP-HTTPS","permalink":"https://js-mark.com/tags/HTTP-HTTPS/"},{"name":"windows","slug":"windows","permalink":"https://js-mark.com/tags/windows/"},{"name":"linux","slug":"linux","permalink":"https://js-mark.com/tags/linux/"},{"name":"VSCode","slug":"VSCode","permalink":"https://js-mark.com/tags/VSCode/"},{"name":"系统底层","slug":"系统底层","permalink":"https://js-mark.com/tags/%E7%B3%BB%E7%BB%9F%E5%BA%95%E5%B1%82/"},{"name":"Shell","slug":"Shell","permalink":"https://js-mark.com/tags/Shell/"},{"name":"脚本操作","slug":"脚本操作","permalink":"https://js-mark.com/tags/%E8%84%9A%E6%9C%AC%E6%93%8D%E4%BD%9C/"},{"name":"Markdown","slug":"Markdown","permalink":"https://js-mark.com/tags/Markdown/"},{"name":"掘金","slug":"掘金","permalink":"https://js-mark.com/tags/%E6%8E%98%E9%87%91/"},{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/tags/Vue/"},{"name":"ESLint","slug":"ESLint","permalink":"https://js-mark.com/tags/ESLint/"},{"name":"JS时间处理","slug":"JS时间处理","permalink":"https://js-mark.com/tags/JS%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"},{"name":"JS","slug":"JS","permalink":"https://js-mark.com/tags/JS/"},{"name":"vue","slug":"vue","permalink":"https://js-mark.com/tags/vue/"},{"name":"vuex","slug":"vuex","permalink":"https://js-mark.com/tags/vuex/"},{"name":"Webpack3.10","slug":"Webpack3-10","permalink":"https://js-mark.com/tags/Webpack3-10/"},{"name":"语法","slug":"语法","permalink":"https://js-mark.com/tags/%E8%AF%AD%E6%B3%95/"},{"name":"模块化","slug":"模块化","permalink":"https://js-mark.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"},{"name":"规范","slug":"规范","permalink":"https://js-mark.com/tags/%E8%A7%84%E8%8C%83/"},{"name":"翻译","slug":"翻译","permalink":"https://js-mark.com/tags/%E7%BF%BB%E8%AF%91/"}]}