{"meta":{"title":"Blog","subtitle":null,"description":"Personal Technology Blog","author":"Mark","url":"https://js-mark.com","root":"/"},"pages":[{},{},{}],"posts":[{"title":"修改了SSH默认端口之后，如何配置git？","date":"2020-01-19T15:24:30.000Z","path":"git操作/修改了SSH默认端口之后，如何配置git？/","content":"<h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p>由于安全或者其它原因，我们可能会修改默认的SSH服务端口号，默认情况下，已有的git项目在pull或者push的时候会报错！</p>\n<p>现在假设原来的项目的remote设置为<span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEB4eHguY29t\">git@xxx.com<i class=\"fa fa-external-link-alt\"></i></span>:Projects/xxx.git，将服务器SSH默认端口修改为223后，导致push或 pull出错</p>\n<a id=\"more\"></a>\n<h3 id=\"有两个解决办法\"><a href=\"#有两个解决办法\" class=\"headerlink\" title=\"有两个解决办法\"></a>有两个解决办法</h3><h4 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin ssh://git@xxx.com:223/~/Projects/p1.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat&gt;~/.ssh/config</span><br><span class=\"line\"><span class=\"comment\"># 映射一个别名</span></span><br><span class=\"line\">Host xxx.com</span><br><span class=\"line\">HostName xxxx.com</span><br><span class=\"line\">Port 223</span><br><span class=\"line\">AddKeysToAgent yes</span><br><span class=\"line\">UseKeychain yes</span><br><span class=\"line\"><span class=\"comment\">#此处是开启git的ssh翻墙代理</span></span><br><span class=\"line\"><span class=\"comment\">#ProxyCommand /usr/bin/nc -X 5 -x 127.0.0.1:1086 %h %p</span></span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>修改p1.git项目下的git配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin git@xxx:Projects/p1.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tLzIwMTYvMDIvMTgvZ2l0bGFiLWRvdC1jb20tbm93LXN1cHBvcnRzLWFuLWFsdGVybmF0ZS1naXQtcGx1cy1zc2gtcG9ydC8=\">gitlab 社区解决方案<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","updated":"2020-04-06T17:52:37.171Z","comments":true,"link":"","permalink":"https://js-mark.com/git%E6%93%8D%E4%BD%9C/%E4%BF%AE%E6%94%B9%E4%BA%86SSH%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEgit%EF%BC%9F/","categories":[{"name":"git操作","slug":"git操作","permalink":"https://js-mark.com/categories/git%E6%93%8D%E4%BD%9C/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"sourceTree","slug":"sourceTree","permalink":"https://js-mark.com/tags/sourceTree/"},{"name":"git","slug":"git","permalink":"https://js-mark.com/tags/git/"}]},{"title":"2019前端面试题整理","date":"2019-07-13T06:34:38.000Z","path":"前端面试/2019年前端面试题整理/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>本人并不是技术大牛(但是会一直朝着那个方向前进)，本文会分享一些本人在面试过程中遇到的一些比较有意思的前端面试题目，如有不对之处还请各位巨牛批评指正！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h3><blockquote>\n<p>Q: 使用promise封装一个readfile函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A:</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.去除连续重复字符串？例：abcdaaabcd 输出abcdabcd</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A:</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Q: 正则将电话号码中间四位变成#号</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A:</span><br><span class=\"line\">  <span class=\"comment\">// 方式 1： 正则分组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> phone = <span class=\"string\">\"18180800880\"</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/(\\d&#123;3&#125;)\\d&#123;4&#125;(\\d&#123;4&#125;)/</span></span><br><span class=\"line\">  phone.replace(reg,<span class=\"string\">\"$1****$2\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 181****0880</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 方式 2：字符串截取</span></span><br><span class=\"line\">  phone.substr(<span class=\"number\">0</span>,<span class=\"number\">3</span>) + <span class=\"string\">\"****\"</span> + phone.substr(<span class=\"number\">7</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Q: 查看下列代码运行结果：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A:</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Q: 查看下列代码运行结果：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  foo = <span class=\"number\">10</span>  <span class=\"comment\">// 由于foo在函数中只为可读，因此赋值无效</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(foo)</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Q: 数组拆解: flat: [1,[{a:1},3]] –&gt; [1, 2, 3]</p>\n</blockquote>\n<ul>\n<li>方式 1，缺陷如果元素是对象会报错</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.flat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.toString().split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> +item )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式 2，es6数组新扩展，参数是维度，可填写无穷大</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>]].flat(<span class=\"number\">1</span>) ==&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式 3，reduce 和 concat</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,&#123;<span class=\"attr\">sas</span>: <span class=\"string\">'222'</span>&#125;,<span class=\"number\">3</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>, [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenDeep</span>(<span class=\"params\">arr1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr1.reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> <span class=\"built_in\">Array</span>.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">flattenDeep(arr1);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络请求方面\"><a href=\"#网络请求方面\" class=\"headerlink\" title=\"网络请求方面\"></a>网络请求方面</h3><blockquote>\n<p>Q: 谈谈 cookie、localStorage 以及 sessionStorage 区别，以及cookie 为什么不建议用？</p>\n</blockquote>\n<ul>\n<li>三者的异同：上面的使用方式说好了，下面就唠唠三者之间的区别，这个问题其实很多大厂面试的时候也都会问到，所以可以注意一下这几个之间的区别。生命周期：cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效localStorage：除非被手动清除，否则将会永久保存。</li>\n<li>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</li>\n<li>存放数据大小：cookie：4KB左右</li>\n<li>localStorage和sessionStorage：可以保存5MB的信息。</li>\n<li>http请求：cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</li>\n<li>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</li>\n<li>易用性：cookie：需要程序员自己封装，源生的Cookie接口不友好</li>\n<li>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</li>\n<li>应用场景：从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比storage更好用的。其他情况下，可以使用storage，就用storage。</li>\n<li>storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。</li>\n<li>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</li>\n</ul>\n","updated":"2020-04-06T17:52:13.369Z","comments":true,"link":"","permalink":"https://js-mark.com/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/2019%E5%B9%B4%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/","categories":[{"name":"前端面试","slug":"前端面试","permalink":"https://js-mark.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"面试题","slug":"面试题","permalink":"https://js-mark.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"name":"Javascript","slug":"Javascript","permalink":"https://js-mark.com/tags/Javascript/"}]},{"title":"MAC常用软件推荐","date":"2019-06-10T01:44:40.000Z","path":"Mac/mac常用软件/","content":"<h4 id=\"Coding-IDE\"><a href=\"#Coding-IDE\" class=\"headerlink\" title=\"Coding IDE\"></a>Coding IDE</h4><ul>\n<li><p>Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode 常用插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>atom github 出品开源编辑器 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdG9tLmlvLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span>,<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdG9tLWNoaW5hLm9yZy8=\">中文社区<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>sublime3 收费编辑器 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>微信开发者工具（开发微信小程序和微信公众号） <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2RldnRvb2xzL2Rvd25sb2FkLmh0bWw=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>支付宝小程序（开发支付宝小程序） <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL21pbmkvaWRlL2Rvd25sb2Fk\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>HBuilder DCloud 出品 IDE <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kY2xvdWQuaW8v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Webstorm 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费。 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS93ZWJzdG9ybS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n<a id=\"more\"></a>\n<h3 id=\"Git-GUI\"><a href=\"#Git-GUI\" class=\"headerlink\" title=\"Git GUI\"></a>Git GUI</h3></li>\n<li><p>SourceTre 一个免费开源的 windows 和 mac 上的 git 客户端 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc291cmNldHJlZWFwcC5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Gitkraken 一个免费开源的 windows、mac以及 linux 上的 git 客户端,ui 很棒！ <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2l0a3Jha2VuLmNvbS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h3 id=\"调试软件\"><a href=\"#调试软件\" class=\"headerlink\" title=\"调试软件\"></a>调试软件</h3><ul>\n<li><p>Charles是HTTP代理/ HTTP监视器/反向代理，使开发人员可以查看其计算机与Internet之间的所有HTTP和SSL / HTTPS通信。这包括请求，响应和HTTP标头（其中包含cookie和缓存信息） <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hhcmxlc3Byb3h5LmNvbS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Fiddler可定制的免费工具、Web会话操作、网页调试 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVsZXJpay5jb20vZmlkZGxlcg==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Wireshark专业的抓包工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h3 id=\"MD文档编写\"><a href=\"#MD文档编写\" class=\"headerlink\" title=\"MD文档编写\"></a>MD文档编写</h3><ul>\n<li>Markeditor <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWFya2VkaXRvci5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>MWeb <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5td2ViLmltLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Typora <span class=\"exturl\" data-url=\"aHR0cHM6Ly90eXBvcmEuaW8v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Markdown 在线编辑器<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW5kYW8uZ2l0aHViLmlvL2VkaXRvci5tZC8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"邮件收发\"><a href=\"#邮件收发\" class=\"headerlink\" title=\"邮件收发\"></a>邮件收发</h3><ul>\n<li>网易邮箱</li>\n<li>腾讯邮箱</li>\n<li>Foxmail</li>\n</ul>\n<h3 id=\"终端\"><a href=\"#终端\" class=\"headerlink\" title=\"终端\"></a>终端</h3><ul>\n<li>iterm2 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXRlcm0yLmNvbS9kb3dubG9hZHMuaHRtbA==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h4 id=\"Mac下终端配置（iterm2-oh-my-zsh-solarized配色方案）\"><a href=\"#Mac下终端配置（iterm2-oh-my-zsh-solarized配色方案）\" class=\"headerlink\" title=\"Mac下终端配置（iterm2 + oh-my-zsh + solarized配色方案）\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2VpeHVxaW4vcC83MDI5MTc3Lmh0bWw=\">Mac下终端配置（iterm2 + oh-my-zsh + solarized配色方案）<i class=\"fa fa-external-link-alt\"></i></span></h4><h3 id=\"小型工具软件\"><a href=\"#小型工具软件\" class=\"headerlink\" title=\"小型工具软件\"></a>小型工具软件</h3><ul>\n<li>SwitchHosts 切换 hosts 工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vbGRqLmdpdGh1Yi5pby9Td2l0Y2hIb3N0cy8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Snipaste截图工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5zbmlwYXN0ZS5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><ul>\n<li>本文不提供下载链接，只做推荐！</li>\n</ul>\n","updated":"2020-04-07T14:39:53.567Z","comments":true,"link":"","permalink":"https://js-mark.com/Mac/mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/","categories":[{"name":"Mac","slug":"Mac","permalink":"https://js-mark.com/categories/Mac/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"Mac","slug":"Mac","permalink":"https://js-mark.com/tags/Mac/"},{"name":"软件","slug":"软件","permalink":"https://js-mark.com/tags/%E8%BD%AF%E4%BB%B6/"}]},{"title":"分享 stylus 语法学习笔记","date":"2019-05-28T07:51:21.000Z","path":"JavaScript/stylus语法笔记/","content":"<h3 id=\"1、定义变量\"><a href=\"#1、定义变量\" class=\"headerlink\" title=\"1、定义变量\"></a>1、定义变量</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$var_name</span> = value</span><br></pre></td></tr></table></figure>\n\n<p>is defined 用来判断一个变量是否已经被赋值。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo is defined</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>或者采用内置函数 lookup(name)：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"number\">#80e2e9</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">lookup</span><span class=\"params\">(name)</span></span> <span class=\"comment\">// 变量名，判断是否已经定义该变量</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; #80e2e9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、for-循环\"><a href=\"#2、for-循环\" class=\"headerlink\" title=\"2、for 循环\"></a>2、for 循环</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">$i</span> <span class=\"keyword\">in</span> (<span class=\"number\">0</span> .. <span class=\"number\">24</span>)</span><br><span class=\"line\">   .cc-&#123;<span class=\"variable\">$i</span>&#125;</span><br><span class=\"line\">      <span class=\"attribute\">width</span> <span class=\"number\">100</span> / <span class=\"variable\">$i</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、导入\"><a href=\"#3、导入\" class=\"headerlink\" title=\"3、导入\"></a>3、导入</h3><p>@import “文件路径”<br>@import “文件路径/*“导入目录下所有 styl 文件</p>\n<p>@require “文件路径”<br>@require “文件路径/*“导入目录下所有 styl 文件</p>\n<h3 id=\"4、插值\"><a href=\"#4、插值\" class=\"headerlink\" title=\"4、插值\"></a>4、插值</h3><p>{}使用该花括号进行插值<br>Stylus 支持使用{}字符包围表达式进行插值，然后表达式成为标识符的一部分。<br>例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-&#123;<span class=\"string\">'border'</span> + <span class=\"string\">'-radius'</span>&#125;评估为-webkit-<span class=\"attribute\">border-radius</span>。</span><br></pre></td></tr></table></figure>\n\n<p>选择器插值</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table</span><br><span class=\"line\">  <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"selector-tag\">tr</span>:nth-child(&#123;row&#125;)</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">10px</span> * row</span><br></pre></td></tr></table></figure>\n\n<p>会产生如下 css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(1)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(2)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(3)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(4)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(5)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>您还可以通过构建一个字符串并将它们插入到位来将多个选择器放在一个变量中：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mySelectors = <span class=\"string\">'#foo,#bar,.baz'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;mySelectors&#125;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#000</span></span><br></pre></td></tr></table></figure>\n\n<p>产生如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#foo</span>,</span><br><span class=\"line\"><span class=\"selector-id\">#bar</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.baz</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、mixin\"><a href=\"#5、mixin\" class=\"headerlink\" title=\"5、mixin\"></a>5、mixin</h3><p>mixin 和函数都以相同的方式定义，但它们以不同的方式应用。</p>\n<p>例如，我们有一个 border-radius(n)下面定义的函数，它作为 mixin 调用（即，作为语句调用，而不是表达式的一部分）。</p>\n<p>在 border-radius()选择器中调用时，属性将展开并复制到选择器中。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span>[type=button]</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>(<span class=\"number\">5px</span>)</span><br></pre></td></tr></table></figure>\n\n<p>编译后</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"button\"]</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">-moz-border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 mixins 时，您可以完全省略括号，提供出色的透明供应商属性支持！</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span>[type=button]</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> <span class=\"number\">5px</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，border-radius 我们的 mixin 中的内容被视为属性，而不是递归函数调用。<br>为了更进一步，我们可以利用自动 arguments 局部变量，包含传递的表达式，允许传递多个值：<br>arguments 和 js 函数的 arguments 差不多都是获取函数实际参数<br>length(arguments) 获取参数个数</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> arguments</span><br></pre></td></tr></table></figure>\n\n<p>现在我们可以传递像 border-radius 1px 2px / 3px 4px！</p>\n<h3 id=\"6、选择器\"><a href=\"#6、选择器\" class=\"headerlink\" title=\"6、选择器\"></a>6、选择器</h3><p>^[N],选择嵌套选择器的第个<br>^[N]表示部分引用，其中 N 是数字(-1, 0, 1 等等)。<br>^[0]引用嵌套选择器中的第一层，^[1]则引用第一层和第二层。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ^[<span class=\"number\">0</span>]:hover &amp;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n\n<p>注：第一层和第二层是一个完整的选择器.foo__bar，但^[0]部分引用第一层，即.foo。<br>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span>:hover <span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若 N 为负数，则从尾部计算。如^[-1]表示去除最后一层后剩下部分的引用。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    &amp;_baz</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">      ^[-<span class=\"number\">1</span>]:hover &amp;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n\n<p>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo__bar</span>:hover <span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、块混合-Block-mixins\"><a href=\"#7、块混合-Block-mixins\" class=\"headerlink\" title=\"7、块混合 Block mixins\"></a>7、块混合 Block mixins</h3><p>我们使用+前缀可以给混合(mixins)传递块(blocks):</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  .bar</span><br><span class=\"line\">    &#123;block&#125;<span class=\"comment\">// 调用 mixins里的代码块类似vue 的slot一样</span></span><br><span class=\"line\"></span><br><span class=\"line\">+foo()</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\">编译后：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内置方法\"><a href=\"#内置方法\" class=\"headerlink\" title=\"内置方法\"></a>内置方法</h3><p><span class=\"exturl\" data-url=\"aHR0cDovL3N0eWx1cy1sYW5nLmNvbS9kb2NzL2JpZnMuaHRtbA==\">文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n","updated":"2020-04-07T14:40:05.372Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/stylus%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"stylus","slug":"stylus","permalink":"https://js-mark.com/tags/stylus/"},{"name":"css","slug":"css","permalink":"https://js-mark.com/tags/css/"}]},{"title":"NPM error \"npm Cannot read property 'length' of undefined\"","date":"2019-05-28T06:59:35.000Z","path":"JavaScript/NPM-Error/","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ul>\n<li>出现错误版本<code>npm 6.9.0</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g outdated</span><br><span class=\"line\"><span class=\"comment\"># 检测所有全局依赖包更新情况</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>报错显示</li>\n</ul>\n<p><img data-src=\"/assets/img/2019/05/1.jpg\" alt=\"image\"></p>\n<h3 id=\"修复方法\"><a href=\"#修复方法\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 148行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> columns = [</span><br><span class=\"line\">\tdepname,</span><br><span class=\"line\">\thas || <span class=\"string\">\"MISSING\"</span>,</span><br><span class=\"line\">\twant,</span><br><span class=\"line\">\tlatest,</span><br><span class=\"line\">\tdeppath || <span class=\"string\">\"global\"</span> <span class=\"comment\">// 此处修改为这样</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ucG0uY29tbXVuaXR5L3QvbnBtLW91dGRhdGVkLXRocm93LWFuLWVycm9yLWNhbm5vdC1yZWFkLXByb3BlcnR5LWxlbmd0aC1vZi11bmRlZmluZWQvNTkyOQ==\">“npm-outdated-throw-an-error-cannot-read-property-length-of-undefined”<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25wbS9jbGkvY29tbWl0L2QwNzU0NzE1NGViOGE4OGFhNGZkZThhMzdlMTI4ZTFlMzI3MmFkYzEjZGlmZi0zZDIwNDk5ZDU4ZjE0YzZmMWVkZmU5M2Q4YmE4YThhMg==\">“npm Cannot read property ‘length’ of undefined”<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","updated":"2020-04-07T14:39:57.229Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/NPM-Error/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"NPM","slug":"NPM","permalink":"https://js-mark.com/tags/NPM/"},{"name":"NodeJs","slug":"NodeJs","permalink":"https://js-mark.com/tags/NodeJs/"}]},{"title":"ES6语法（一）","date":"2019-03-25T06:51:56.000Z","path":"JavaScript/ES6语法（一）/","content":"<p>学习 ES6 语法笔记</p>\n<h4 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h4><h5 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h5><h6 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h6><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p>以前，为变量赋值，只能直接指定值。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 允许写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p>\n<p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]]</span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [, , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>]</span><br><span class=\"line\">third <span class=\"comment\">// \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">\"a\"</span>]</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">y <span class=\"comment\">// undefined</span></span><br><span class=\"line\">z <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n\n<p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo] = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> [bar, foo] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p>\n<p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>]</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">d <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>上面两个例子，都属于不完全解构，但是可以成功。</p>\n<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p>\n<p>对于 Set 结构，也可以使用数组的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z] = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>])</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br></pre></td></tr></table></figure>\n\n<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> b = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> a</span><br><span class=\"line\">\t\t;[a, b] = [b, a + b]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second, third, fourth, fifth, sixth] = fibs()</span><br><span class=\"line\">sixth <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>fibs</code>是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p>\n<h6 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h6><p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = []</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">\"b\"</span>] = [<span class=\"string\">\"a\"</span>] <span class=\"comment\">// x='a', y='b'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">\"b\"</span>] = [<span class=\"string\">\"a\"</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// x='a', y='b'</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>]</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p>\n<p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"aaa\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，因为<code>x</code>能取到值，所以函数<code>f</code>根本不会执行。上面的代码其实等价于下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">1</span>][<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">\tx = f()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tx = [<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [] <span class=\"comment\">// x=1; y=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>] <span class=\"comment\">// x=2; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>] <span class=\"comment\">// x=1; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [] <span class=\"comment\">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面最后一个表达式之所以会报错，是因为<code>x</code>用<code>y</code>做默认值时，<code>y</code>还没有声明。</p>\n<h5 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h5><p>解构不仅可以用于数组，还可以用于对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br></pre></td></tr></table></figure>\n\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于<code>undefined</code>。</p>\n<p>如果变量名与属性名不一致，必须写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">\"hello\"</span>, <span class=\"attr\">last</span>: <span class=\"string\">\"world\"</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj</span><br><span class=\"line\">f <span class=\"comment\">// 'hello'</span></span><br><span class=\"line\">l <span class=\"comment\">// 'world'</span></span><br></pre></td></tr></table></figure>\n\n<p>这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: foo, <span class=\"attr\">bar</span>: bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。</p>\n<p>与数组一样，解构也可以用于嵌套结构的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">\"Hello\"</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">\"World\"</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，这时<code>p</code>是模式，不是变量，因此不会被赋值。如果<code>p</code>也要作为变量赋值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">\"Hello\"</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">\"World\"</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp,</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br><span class=\"line\">p <span class=\"comment\">// [\"Hello\", &#123;y: \"World\"&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123;</span><br><span class=\"line\">\t\t\tline: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tcolumn: <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tloc,</span><br><span class=\"line\">\tloc: &#123; start &#125;,</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123; line &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; = node</span><br><span class=\"line\">line <span class=\"comment\">// 1</span></span><br><span class=\"line\">loc <span class=\"comment\">// Object &#123;start: Object&#125;</span></span><br><span class=\"line\">start <span class=\"comment\">// Object &#123;line: 1, column: 5&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码有三次解构赋值，分别是对<code>loc</code>、<code>start</code>、<code>line</code>三个属性的解构赋值。注意，最后一次对<code>line</code>属性的解构赋值之中，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不是变量。</p>\n<p>下面是嵌套赋值的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\"></span><br><span class=\"line\">;(&#123; <span class=\"attr\">foo</span>: obj.prop, <span class=\"attr\">bar</span>: arr[<span class=\"number\">0</span>] &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span>, <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"comment\">// &#123;prop:123&#125;</span></span><br><span class=\"line\">arr <span class=\"comment\">// [true]</span></span><br></pre></td></tr></table></figure>\n\n<p>对象的解构也可以指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x, y = <span class=\"number\">5</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">5</span> &#125;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">\"Something went wrong\"</span> &#125; = &#123;&#125;</span><br><span class=\"line\">msg <span class=\"comment\">// \"Something went wrong\"</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">undefined</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，属性<code>x</code>等于<code>null</code>，因为<code>null</code>与<code>undefined</code>不严格相等，所以是个有效的赋值，导致默认值<code>3</code>不会生效。</p>\n<p>如果解构失败，变量的值等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo &#125; = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tfoo: &#123; bar &#125;</span><br><span class=\"line\">&#125; = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，等号左边对象的<code>foo</code>属性，对应一个子对象。该子对象的<code>bar</code>属性，解构时会报错。原因很简单，因为<code>foo</code>这时等于<code>undefined</code>，再取子属性就会报错，请看下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _tmp = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br><span class=\"line\">_tmp.foo.bar <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的写法会报错，因为 JavaScript 引擎会将<code>{x}</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\">;(&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p>\n<p>解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(&#123;&#125; = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>])</span><br><span class=\"line\">;(&#123;&#125; = <span class=\"string\">\"abc\"</span>)</span><br><span class=\"line\">;(&#123;&#125; = [])</span><br></pre></td></tr></table></figure>\n\n<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码将<code>Math</code>对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>\n<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"number\">0</span>: first, [arr.length - <span class=\"number\">1</span>]: last &#125; = arr</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">last <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码对数组进行对象解构。数组<code>arr</code>的<code>0</code>键对应的值是<code>1</code>，<code>[arr.length - 1]</code>就是<code>2</code>键，对应的值是<code>3</code>。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。</p>\n<h5 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h5><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">a <span class=\"comment\">// \"h\"</span></span><br><span class=\"line\">b <span class=\"comment\">// \"e\"</span></span><br><span class=\"line\">c <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">d <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">e <span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n\n<p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">length</span>: len &#125; = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h5><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"number\">123</span></span><br><span class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"literal\">true</span></span><br><span class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，数值和布尔值的包装对象都有<code>toString</code>属性，因此变量<code>s</code>都能取到值。</p>\n<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: x &#125; = <span class=\"literal\">undefined</span> <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: y &#125; = <span class=\"literal\">null</span> <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h5><p>函数的参数也可以使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].map(<span class=\"function\">(<span class=\"params\">[a, b]</span>) =&gt;</span> a + b)</span><br><span class=\"line\"><span class=\"comment\">// [ 3, 7 ]</span></span><br></pre></td></tr></table></figure>\n\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span> &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code>x</code>和<code>y</code>的值。如果解构失败，<code>x</code>和<code>y</code>等于默认值。</p>\n<p>注意，下面的写法会得到不一样的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x, y &#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码是为函数<code>move</code>的参数指定默认值，而不是为变量<code>x</code>和<code>y</code>指定默认值，所以会得到与前一种写法不同的结果。</p>\n<p><code>undefined</code>就会触发函数参数的默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">x = <span class=\"string\">\"yes\"</span></span>) =&gt;</span> x)</span><br><span class=\"line\"><span class=\"comment\">// [ 1, 'yes', 3 ]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"圆括号问题\"><a href=\"#圆括号问题\" class=\"headerlink\" title=\"圆括号问题\"></a>圆括号问题</h5><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>\n<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>\n<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>\n<h6 id=\"不能使用圆括号的情况\"><a href=\"#不能使用圆括号的情况\" class=\"headerlink\" title=\"不能使用圆括号的情况\"></a>不能使用圆括号的情况</h6><p>以下三种解构赋值不得使用圆括号。</p>\n<p>（1）变量声明语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [(a)] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">x</span>: (c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> (&#123;<span class=\"attr\">x</span>: c&#125;) = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x: c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x): c&#125; = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">o</span>: (&#123; <span class=\"attr\">p</span>: p &#125;) &#125; = &#123; <span class=\"attr\">o</span>: &#123; <span class=\"attr\">p</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>\n<p>（2）函数参数</p>\n<p>函数参数也属于变量声明，因此不能带有圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[(z</span>)]) </span>&#123; <span class=\"keyword\">return</span> z; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[z,(x</span>)]) </span>&#123; <span class=\"keyword\">return</span> x; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）赋值语句的模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: a &#125;) = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\">([a]) = [<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将整个模式放在圆括号之中，导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\">;[&#123; <span class=\"attr\">p</span>: a &#125;, &#123; <span class=\"attr\">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将一部分模式放在圆括号之中，导致报错。</p>\n<h5 id=\"可以使用圆括号的情况\"><a href=\"#可以使用圆括号的情况\" class=\"headerlink\" title=\"可以使用圆括号的情况\"></a>可以使用圆括号的情况</h5><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[b] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;(&#123; <span class=\"attr\">p</span>: d &#125; = &#123;&#125;) <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;[<span class=\"built_in\">parseInt</span>.prop] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n\n<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code>p</code>，而不是<code>d</code>；第三行语句与第一行语句的性质一致。</p>\n<h5 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h5><p>变量的解构赋值用途很多。</p>\n<p><strong>（1）交换变量的值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">;[x, y] = [y, x]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p><strong>（2）从函数返回多个值</strong></p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tfoo: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tbar: <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example()</span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）函数参数的定义</strong></p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）提取 JSON 数据</strong></p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">\tid: <span class=\"number\">42</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">\tdata: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number)</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p><strong>（5）函数参数的默认值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\turl,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tasync = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tbeforeSend = function(</span>) </span>&#123;&#125;,</span><br><span class=\"line\">\t\tcache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\tcomplete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">\t\tcrossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\tglobal = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// ... more config</span></span><br><span class=\"line\">\t&#125; = &#123;&#125;</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p><strong>（6）遍历 Map 结构</strong></p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">\"first\"</span>, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">map.set(<span class=\"string\">\"second\"</span>, <span class=\"string\">\"world\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>（7）输入模块的指定方法</strong></p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2VzNi5ydWFueWlmZW5nLmNvbS8jZG9jcw==\">《ECMAScript 6 入门》<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","updated":"2020-04-07T14:39:37.718Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/ES6%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"ES6语法","slug":"ES6语法","permalink":"https://js-mark.com/tags/ES6%E8%AF%AD%E6%B3%95/"}]},{"title":"聊聊网络中的传输协议","date":"2019-03-25T06:10:48.000Z","path":"网络传输协议/聊聊网络中的传输协议/","content":"<p>一直说写这么一篇文章，可是都没什么时间静下心来整理，最近项目不是很忙，打算抽时间整理整理一些常用的方法，反正慢慢来嘛~~</p>\n<h4 id=\"聊聊网络传输协议\"><a href=\"#聊聊网络传输协议\" class=\"headerlink\" title=\"聊聊网络传输协议\"></a>聊聊网络传输协议</h4><a id=\"more\"></a>\n<p><br/>&emsp;&emsp;网络传输协议，英文全名（Internet communication protocol）又叫互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（英语：TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（英语：TCP/IP Protocol Stack） 。这些协议最早发源于美国国防部（缩写为 DoD）的 ARPA 网项目，因此也被称作 DoD 模型（DoD Model）。这个协议族由互联网工程任务组（IETF）负责维护。<br>&emsp;&emsp;TCP/IP 提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层 OSI 模型。</p>\n<blockquote>\n<p>下图介绍了网络传输协议七层 OSI 模型图以及四层网络协议解构图：</p>\n</blockquote>\n<p><img data-src=\"/assets/img/2019/03/1.png\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/2.png\" alt=\"image\"></p>\n<p>它们叫什么名字，其实并不重要。只需要知道，互联网传输协议分成若干层就可以了那么接下来我讲讲这个互联网络中的一些规定协议，这些协议大多都是我们常见的一些：。。。</p>\n<p><img data-src=\"/assets/img/2019/03/3.png\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/4.png\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/5.png\" alt=\"image\"></p>\n<h4 id=\"http-协议与-tcp-协议的恩怨情仇\"><a href=\"#http-协议与-tcp-协议的恩怨情仇\" class=\"headerlink\" title=\"http 协议与 tcp 协议的恩怨情仇\"></a>http 协议与 tcp 协议的恩怨情仇</h4><h5 id=\"tcp-三次握手和四次挥手\"><a href=\"#tcp-三次握手和四次挥手\" class=\"headerlink\" title=\"tcp 三次握手和四次挥手\"></a>tcp 三次握手和四次挥手</h5><p>讲这个 http 协议协议与 tcp 协议的恩怨情仇，就不得不提 tcp 的三次握手和四次挥手，从上图来看谁让人家是传输层，咱们是应用层呐！下图介绍了关于三次握手和四次挥手的拟人化描述!</p>\n<p><img data-src=\"/assets/img/2019/03/6.png\" alt=\"image\"></p>\n<p>动画介绍三次握手和四次挥手</p>\n<p><img data-src=\"/assets/img/2019/03/7.gif\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/8.gif\" alt=\"image\"></p>\n<blockquote>\n<p>先写到这待补充完善！</p>\n</blockquote>\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUJEJTkxJUU3JUJCJTlDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF\">网络传输协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvT1NJJUU2JUE4JUExJUU1JTlFJThC\">OSI 模型 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUI2JTg1JUU2JTk2JTg3JUU2JTlDJUFDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF\">超文本传输协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF\">互联网协议入门（一） - 阮一峰的网络日志<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF\">TCP 协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9TdGF0dXM=\">MDN http 响应代码<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>《图解 HTTP 协议》</li>\n<li>《计算机网络》</li>\n</ul>\n","updated":"2020-04-07T14:39:20.726Z","comments":true,"link":"","permalink":"https://js-mark.com/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/%E8%81%8A%E8%81%8A%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/","categories":[{"name":"网络传输协议","slug":"网络传输协议","permalink":"https://js-mark.com/categories/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"}],"tags":[{"name":"网络传输协议","slug":"网络传输协议","permalink":"https://js-mark.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"},{"name":"TCP/IP协议族","slug":"TCP-IP协议族","permalink":"https://js-mark.com/tags/TCP-IP%E5%8D%8F%E8%AE%AE%E6%97%8F/"},{"name":"HTTP/HTTPS","slug":"HTTP-HTTPS","permalink":"https://js-mark.com/tags/HTTP-HTTPS/"}]},{"title":"命令行配置代理服务","date":"2019-01-29T01:15:16.000Z","path":"系统/命令行配置代理服务/","content":"<ul>\n<li>因为需要通过命令下载国外资源，但在 IE 配置代理后，对 cmd 却没有效果，于是查了下，有配置 cmd 代理的方法。</li>\n</ul>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><a id=\"more\"></a>\n<ul>\n<li>通过设置环境变量来配置代理，一种方式是直接在系统设置中配置（这个就不解释了），另一种方式是在需要时通过 <code>set</code> 命令临时设置。</li>\n<li>控制代理的环境变量分别是 http_proxy、http_proxy_user、http_proxy_pass，不区分大小写，分别代表代理地址（应是 <span class=\"exturl\" data-url=\"aHR0cDovL2lwOnBvcnQ=\">http://ip:port<i class=\"fa fa-external-link-alt\"></i></span> 的形式）、代理用户名、代理密码，一般情况下只需要配置 http_proxy 即可（其余两个参数暂无条件测试，是否有作用未知），参数格式大致如下所示。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http_proxy=http://localhost:1080</span><br><span class=\"line\">http_proxy_user=zhangsan</span><br><span class=\"line\">http_proxy_pass=lisi</span><br><span class=\"line\">通过 <span class=\"built_in\">set</span> 命令的形式大致如下所示。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置参数\"><a href=\"#设置参数\" class=\"headerlink\" title=\"设置参数\"></a>设置参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://localhost:1080</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=zhangsan</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=lisi</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除参数\"><a href=\"#删除参数\" class=\"headerlink\" title=\"删除参数\"></a>删除参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=</span><br></pre></td></tr></table></figure>\n\n<p>另外经测试还有 https_proxy 环境变量可配置，用于配置 https 的代理，如果未配置则将使用 http_proxy 的配置。据此可推测有 https_proxy_user 等参数。</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li>因目前没有环境测试，故以下结论仅根据网上资料整理并推测所得，仅做记录和供参考，详见参考资料。</li>\n<li>据资料得，Linux 配置方式与 Windows 相似，仅命令及配置方式有所不同。</li>\n<li>可配置的环境变量名分别为 http_proxy、https_proxy、ftp_proxy、no_proxy，分别是配置 http 代理、https 代理、ftp 代理、不使用代理的地址，参数格式大致如下所示（正确性有待考察，可能需要加 http:// 前缀），no_proxy 较特殊。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http*proxy=192.168.10.91:3128</span><br><span class=\"line\">https_proxy=192.168.10.91:3128</span><br><span class=\"line\">ftp_proxy=192.168.10.91:3128</span><br><span class=\"line\">no_proxy=<span class=\"string\">\"127.0.0.1, localhost, 172.26.*, 172.25.6.66, 192.168.\\_\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 linux 下也有两种配置方式，一是需要在相关系统文件中配置，二是通过 export 命令临时设置，这里不做详细介绍。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Windows 和 Linux 的配置方式大致相同，推测 Windows 也有类似 no_proxy 等的配置，鉴于很少用到，故不做深入研究，需要之时可做尝试。</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZXpsb28uY29tLzIwMDgvMTIvc2V0X2h0dHBfcHJveHkuaHRtbA==\">命令行配置代理服务器<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5meDExNC5uZXQvcWEtMTUtMTUzODY3LmFzcHg=\">为 windows cmd 设置代理<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL2x5bXJnLmJsb2cuNTFjdG8uY29tLzE1NTEzMjcvNDI1NzQ0\">linux 命令行模式下实现代理上网<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5saW51eGRpeWYuY29tL2xpbnV4LzE0MTkxLmh0bWw=\">Ubuntu 设置代理和例外<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","updated":"2020-04-07T14:39:23.806Z","comments":true,"link":"","permalink":"https://js-mark.com/%E7%B3%BB%E7%BB%9F/%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/","categories":[{"name":"系统","slug":"系统","permalink":"https://js-mark.com/categories/%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://js-mark.com/tags/windows/"},{"name":"linux","slug":"linux","permalink":"https://js-mark.com/tags/linux/"}]},{"title":"shell脚本学习","date":"2018-12-23T16:00:00.000Z","path":"系统命令/shell脚本学习/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>为什么学习脚本编写???</li>\n<li>你有没有遇到过这样场景，繁杂并且重复的操作 N 多件<del>~</del></li>\n<li>那么这个时候我们是不是可以想一些其他更快捷、更方便的方法呢！（答案是肯定的，肯定有撒因为我们人类可是很懒的高级哺乳动物）<br><img data-src=\"/assets/img/2018/12/20150424040700733.jpg\" alt=\"image\"><br>好了！那么我们步入今天的正题！<a id=\"more\"></a>\n<h3 id=\"一、shell-中特殊变量\"><a href=\"#一、shell-中特殊变量\" class=\"headerlink\" title=\"一、shell 中特殊变量\"></a>一、shell 中特殊变量</h3></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$0</span>    <span class=\"comment\"># 当前脚本的文件名（间接运行时还包括绝对路径）。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$n</span>    <span class=\"comment\"># 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$#</span>    <span class=\"comment\"># 传递给脚本或函数的参数个数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $*    <span class=\"comment\"># 传递给脚本或函数的所有参数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$@</span>    <span class=\"comment\"># 传递给脚本或函数的所有参数。被双引号 (\" \") 包含时，与 $* 不同，下面将会讲到。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $?    <span class=\"comment\"># 上个命令的退出状态，或函数的返回值。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $$    <span class=\"comment\"># 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$_</span>    <span class=\"comment\"># 上一个命令的最后一个参数</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $!    <span class=\"comment\"># 后台运行的最后一个进程的 ID 号</span></span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 现在保存为一个test.sh脚本，然后加上几个参数运行：</span></span><br><span class=\"line\">$ ./test.sh <span class=\"built_in\">test</span> test1 test2 test3 test4</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">./test.sh                      <span class=\"comment\"># $0</span></span><br><span class=\"line\">                               <span class=\"comment\"># $n</span></span><br><span class=\"line\">5                              <span class=\"comment\"># $#</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $*</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $@</span></span><br><span class=\"line\">0                              <span class=\"comment\"># $?</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $$</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $_</span></span><br><span class=\"line\">                               <span class=\"comment\"># $!</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>&emsp;$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号 (“”) 包含时，都以”$1””$2” … “$n” 的形式输出所有参数。<br> &emsp;但是当它们被双引号 (“”) 包含时，”$*”会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@”会将各个参数分开，以”$1””$2” … “$n” 的形式输出所有参数。</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$*=\"</span> $*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"\\$*\\\"=\"</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$@=\"</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"\\$@\\\"=\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"print each param from \\$*\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> $*</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"print each param from \\$@\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"从 \\\"\\$*\\\" 获取并打印每一个参数\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"从 \\\"\\$@\\\" 获取并打印每一个参数\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>返回结果：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$*= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">\"$*\"</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"variable\">$@</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from $*</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\">从 <span class=\"string\">\"$*\"</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\">从 <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、手工处理参数\"><a href=\"#二、手工处理参数\" class=\"headerlink\" title=\"二、手工处理参数\"></a>二、手工处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    -a)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -b)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">        <span class=\"built_in\">shift</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -c)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">        <span class=\"built_in\">shift</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -d)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 选项\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span> is not an option\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"built_in\">shift</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行：./test.sh -a -b t2 -c t3 -d</span></span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、getopt-处理参数\"><a href=\"#三、getopt-处理参数\" class=\"headerlink\" title=\"三、getopt 处理参数\"></a>三、getopt 处理参数</h3><p>下面 getopt ab:c:d “$@” 中的 abcd 分别代表四个选项，后面带有冒号的表示选项需要参数值。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GETOPTOUT=`getopt ab:c:d <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>`</span><br><span class=\"line\">  <span class=\"built_in\">set</span> -- <span class=\"variable\">$GETOPTOUT</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    -a)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -b)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -c)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -d)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 选项\"</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    --)</span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      <span class=\"built_in\">break</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项:\"</span><span class=\"variable\">$1</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"built_in\">shift</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\"> ./proxychains4.sh -a -b t2 -c t3 -d</span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARGV=($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"built_in\">set</span> -- <span class=\"string\">\"<span class=\"variable\">$ARGV</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  -短选项1|--长选项1)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  -短选项2|--长选项2)</span><br><span class=\"line\">    <span class=\"comment\"># 获取选项</span></span><br><span class=\"line\">    opt = <span class=\"variable\">$2</span></span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span> 2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... ...</span><br><span class=\"line\"></span><br><span class=\"line\">  -短选项3|--长选项3)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  --)</span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于 eval 这个命令，用一个小例子解释：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo=10</span><br><span class=\"line\">x=foo</span><br><span class=\"line\">y=<span class=\"string\">'$'</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$foo</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> y=<span class=\"string\">'$'</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span></span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 因为我一般用这个命令连接构建命令参数，所以你可以简单理解为执行两次（虽然不太对）。通过添加 eval 可以把参数解析后再执行。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、getopts-处理参数\"><a href=\"#四、getopts-处理参数\" class=\"headerlink\" title=\"四、getopts 处理参数\"></a>四、getopts 处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">getopts</span> :ab:c:d ARGS</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$ARGS</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  a)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  b)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的值是：<span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  c)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的值是：<span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  d)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 参数\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项：<span class=\"variable\">$ARGS</span>\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这种方法最方便简单。接下来基于这种方法深入讲解。</p>\n<h3 id=\"五、传参意外处理\"><a href=\"#五、传参意外处理\" class=\"headerlink\" title=\"五、传参意外处理\"></a>五、传参意外处理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"?\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项 <span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\"><span class=\"string\">\":\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"没有输入任何选项 <span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">  <span class=\"comment\"># 发生不能预料的错误时。</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"处理选项时出现未知错误\"</span></span><br><span class=\"line\">  ;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kM2NkMzZjOTdhYmM=\">Shell 脚本传参方法总结<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9saW51eC9sLWJhc2gtcGFyYW1ldGVycy5odG1s\">Bash 参数和参数扩展<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4zNjF3YXkuY29tL3NoZWxsLWdldG9wdC80OTgxLmh0bWw=\">shell中的getopt与getopts<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","updated":"2020-04-07T14:40:02.490Z","comments":true,"link":"","permalink":"https://js-mark.com/%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/","categories":[{"name":"系统命令","slug":"系统命令","permalink":"https://js-mark.com/categories/%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/"}],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"https://js-mark.com/tags/VSCode/"},{"name":"系统底层","slug":"系统底层","permalink":"https://js-mark.com/tags/%E7%B3%BB%E7%BB%9F%E5%BA%95%E5%B1%82/"},{"name":"Shell","slug":"Shell","permalink":"https://js-mark.com/tags/Shell/"},{"name":"脚本操作","slug":"脚本操作","permalink":"https://js-mark.com/tags/%E8%84%9A%E6%9C%AC%E6%93%8D%E4%BD%9C/"}]},{"title":"用掘金－Markdown 编辑器写文章","date":"2018-12-11T04:37:00.000Z","path":"网站应用/掘金文档编辑器使用方法/","content":"<h3 id=\"用掘金－Markdown-编辑器写文章\"><a href=\"#用掘金－Markdown-编辑器写文章\" class=\"headerlink\" title=\"用掘金－Markdown 编辑器写文章\"></a>用掘金－Markdown 编辑器写文章</h3><p>欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。</p>\n<a id=\"more\"></a>\n<h3 id=\"丰富的快捷键\"><a href=\"#丰富的快捷键\" class=\"headerlink\" title=\"丰富的快捷键\"></a>丰富的快捷键</h3><p>本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。</p>\n<p>支持的快捷键有：</p>\n<ul>\n<li>加粗： <code>Ctrl/Cmd + B</code></li>\n<li>标题： <code>Ctrl/Cmd + H</code></li>\n<li>插入链接： <code>Ctrl/Cmd + K</code></li>\n<li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li>\n<li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li>\n<li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li>\n<li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li>\n<li>撤销： <code>Ctrl/Cmd + Z</code></li>\n</ul>\n<h3 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h3><h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><blockquote>\n<p>语法格式：** ‘#’+’空格’+’文本’ **</p>\n</blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><blockquote>\n<p>无序列表语法格式：** ‘-‘ + ‘空格’ ＋ ‘文本’ **</p>\n</blockquote>\n<ul>\n<li>文本一</li>\n<li>文本二</li>\n<li>文本三</li>\n</ul>\n<blockquote>\n<p>有序列表语法格式：** ‘数字’ + ‘.’ + ‘空格’ + ‘文本’ **</p>\n</blockquote>\n<ol>\n<li>文本一</li>\n<li>文本二</li>\n<li>文本三</li>\n</ol>\n<blockquote>\n<p>任务列表语法格式：** ‘-‘ + ‘空格’ + ‘[ ]’ + ‘文本’ **</p>\n</blockquote>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 文本一</li>\n<li><input disabled=\"\" type=\"checkbox\"> 文本二</li>\n<li><input disabled=\"\" type=\"checkbox\"> 文本三</li>\n</ul>\n<h4 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h4><p>在 Markdown 中插入链接不需要其他按钮，你只需要使用<code>［显示文本］(链接地址)</code>这样的格式语法即可。例如：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2xkLnhpdHUuaW8=\">稀土掘金<i class=\"fa fa-external-link-alt\"></i></span><br>插入图片的语法与插入链接的语法很像，只是前面多了一个 <code>!</code>.语法如下：<br><code>![图片的标注](图片链接地址)</code></p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><blockquote>\n<p>语法：** ‘&gt;’+’空格’+’文本’ **</p>\n</blockquote>\n<p>例如：</p>\n<blockquote>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面。</p>\n</blockquote>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>如下是代码段的语法：</p>\n<pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是代码段</span><br></pre></td></tr></table></figure>\n</pre>\n\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(alist)</span>:</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> passnum <span class=\"keyword\">in</span> range(len(alist)<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\"> <span class=\"comment\">#print alist,passnum</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(passnum):</span><br><span class=\"line\"> <span class=\"keyword\">if</span> alist[i]&gt;alist[i+<span class=\"number\">1</span>]:</span><br><span class=\"line\"> temp = alist[i]</span><br><span class=\"line\"> alist[i] = alist[i+<span class=\"number\">1</span>]</span><br><span class=\"line\"> alist[i+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\"> <span class=\"keyword\">return</span> alist</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><p><strong>Markdown 　 Extra</strong>　表格语法：</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iPhone</td>\n<td>$560</td>\n</tr>\n<tr>\n<td>iPad</td>\n<td>$780</td>\n</tr>\n<tr>\n<td>iMac</td>\n<td>$1000</td>\n</tr>\n</tbody></table>\n<p>可以使用冒号来定义对齐方式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">iPhone</td>\n<td align=\"right\">6000 元</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"left\">iPad</td>\n<td align=\"right\">3800 元</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"left\">iMac</td>\n<td align=\"right\">10000 元</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<h4 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h4><p>以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBwaW5uLmNvbS9tYXJrZG93bi8=\">Markdown 语法<i class=\"fa fa-external-link-alt\"></i></span>，非常感谢使用** 掘金－Markdown 编辑器**,希望为您提供舒适的写作体验。</p>\n","updated":"2020-04-07T14:39:17.288Z","comments":true,"link":"","permalink":"https://js-mark.com/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8/%E6%8E%98%E9%87%91%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","categories":[{"name":"网站应用","slug":"网站应用","permalink":"https://js-mark.com/categories/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"Markdown","slug":"Markdown","permalink":"https://js-mark.com/tags/Markdown/"},{"name":"掘金","slug":"掘金","permalink":"https://js-mark.com/tags/%E6%8E%98%E9%87%91/"}]},{"title":"初探Vue3.0新特性(未完待续)","date":"2018-12-10T04:00:00.000Z","path":"Vue/Vue3.0/","content":"<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n<img\n  width=\"200\"\n  height=\"200\"\n  data-src=\"https://cn.vuejs.org/images/logo.png\"\n  alt=\"Vue\"></a></p>\n\n<blockquote>\n<h3 id=\"初探-Vue3-0-新特性\"><a href=\"#初探-Vue3-0-新特性\" class=\"headerlink\" title=\"初探 Vue3.0 新特性\"></a>初探 Vue3.0 新特性</h3><p>&emsp;“ 我已经学不动了，只有神可以挽救一下我的膝盖—-” 自 2016 年 10 月 1 日 Vue2.0 版本发布以来到目前为止已经将近快两年的时间了。在这两年里，前端领域风云变化，各种框架层出不穷。小程序横空出世，angular 已经迭代到 angular6,从 angular2 开始已经基本上是将 angularjs 推倒重来，蜕变升级。等等。。。在这两年里，我们看到了太多的框架出现和消失，前端框架基本上是 vue react angular 三足鼎立。感谢各位开源大大，是你们推动了整个前端领域的快速发展。<br>&emsp;与此同时，面对一时间涌现的那么多种前端框架，很多小伙伴们都会感觉力不从心，甚至还出现了众多用户到某知名开源项目上留言：“求求你别写了，我们学不动了~~”<br>&emsp;今天，Vue 的主要开发者尤小右在微博上透露了 Vue3.0 的开发计划，快来看看有哪些新改变吧。</p>\n</blockquote>\n<p><img data-src=\"/assets/img/2018/12/vue3.0.png\" alt=\"image\"></p>\n<blockquote>\n<h3 id=\"9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"><a href=\"#9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\" class=\"headerlink\" title=\"9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"></a>9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。</h3><p>1.Virtual DOM 完全重写，mounting &amp; patching 提速  100% ;<br>2.更多编译时（compile-time）提醒以减少 runtime 开销;<br>3.基于 Proxy 观察者机制以满足全语言覆盖及更好的性能;<br>4.放弃 Object.defineProperty ，使用更快的原生 Proxy;<br>5.组件实例初始化速度提高 100％;<br>6.提速一倍/内存使用降低一半。</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<h3 id=\"对于-3-0-的-proxy-特性有必要讲一讲\"><a href=\"#对于-3-0-的-proxy-特性有必要讲一讲\" class=\"headerlink\" title=\"对于 3.0 的 proxy 特性有必要讲一讲\"></a>对于 3.0 的 proxy 特性有必要讲一讲</h3><p>对于这个观察者机制的变更，给我带来的好处简直不言而喻。（我们终于不再担心目前官网上提的那个检测数组/检测对象变更了）</p>\n</blockquote>\n<p>&emsp;不久前，也就是11月14日-16日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 Vue3.0 Updates 的主题演讲，对 Vue3.0 的更新计划、方向进行了详细阐述（感兴趣的小伙伴可以看看完整的 [PPT](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2ds5Yid5o6i\">https://docs.googl初探<i class=\"fa fa-external-link-alt\"></i></span> Vue3.0 新特性e.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)），表示已经放弃使用了 Object.defineProperty，而选择了使用更快的原生 Proxy !!<br>&emsp;这将会消除了之前 Vue2.x 中基于 Object.defineProperty 的实现所存在的很多限制：无法监听 属性的添加和删除、数组索引和长度的变更，并可以支持 Map、Set、WeakMap 和 WeakSet！</p>\n<p><img data-src=\"/assets/img/2018/12/1.png\" alt=\"image\"><br><img data-src=\"/assets/img/2018/12/2.png\" alt=\"image\"></p>\n<blockquote>\n<p>###</p>\n</blockquote>\n<p>最后期待，2019年的VUE3.0的发布，来让前端开发更便捷，更cool！<br>参考文献：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmZjYmFiMDUxODgyNTc0MWU3YmQ2N2Y=\">初探 Vue3.0 中的一大亮点——Proxy !<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvazZPaE1OcnBhZ3RUbWJoa1ctdG1aZw==\">重磅！尤雨溪发布Vue 3.0开发路线<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMXloUEd5aFFySmNwSkkyWkZ2Qm1lM3BHS2FHTmlMaTcwOWMzN3N2aXZ2MG8vZWRpdD91c3A9c2hhcmluZw==\">尤大大的PPT(需要翻墙下载)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHk=\">Proxy MDN<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","updated":"2020-04-07T14:48:08.294Z","comments":true,"link":"","permalink":"https://js-mark.com/Vue/Vue3.0/","categories":[{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/categories/Vue/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/tags/Vue/"}]},{"title":"eslint-vscode-setting","date":"2018-11-29T16:00:00.000Z","path":"JavaScript/eslint-vscode-setting/","content":"<blockquote>\n<h2 id=\"第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\"><a href=\"#第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\" class=\"headerlink\" title=\"第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\"></a>第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue</h2></blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<h2 id=\"第二步：在任意目录放置-eslintrc-js\"><a href=\"#第二步：在任意目录放置-eslintrc-js\" class=\"headerlink\" title=\"第二步：在任意目录放置.eslintrc.js\"></a>第二步：在任意目录放置.eslintrc.js</h2><h2 id=\"第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\"><a href=\"#第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\" class=\"headerlink\" title=\"第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\"></a>第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur</h2><h2 id=\"第四步：在-vscode-中的配置\"><a href=\"#第四步：在-vscode-中的配置\" class=\"headerlink\" title=\"第四步：在 vscode 中的配置\"></a>第四步：在 vscode 中的配置</h2></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eslint config start</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"configFile\"</span>: <span class=\"string\">\"C:/Users/Mark/.eslint/.eslintrc.js\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">\t<span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"prettier\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Prettier option here</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"prettyhtml\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"printWidth\"</span>: <span class=\"number\">100</span>, <span class=\"comment\">// No line exceeds 100 characters</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">false</span> <span class=\"comment\">// Prefer double quotes over single quotes</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// prettier 格式化配置</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertColons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入冒号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertSemicolons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入分好</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertBraces\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入大括号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundImports\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// import之后是否换行</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundBlocks\"</span>: <span class=\"literal\">false</span>,</span><br></pre></td></tr></table></figure>\n","updated":"2020-04-07T14:39:41.468Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/eslint-vscode-setting/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"VSCode","slug":"VSCode","permalink":"https://js-mark.com/tags/VSCode/"},{"name":"ESLint","slug":"ESLint","permalink":"https://js-mark.com/tags/ESLint/"}]},{"title":"DayJs使用","date":"2018-11-29T16:00:00.000Z","path":"JavaScript/DayJs/","content":"<p align=\"center\">\n    <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img width=\"550\" data-src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\">\n    </a>\n</p>\n<p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p>\n<a id=\"more\"></a>\n<br>\n<p align=\"center\">\n    <a href=\"https://unpkg.com/dayjs/dayjs.min.js\" target=\"_blank\" rel=\"noopener\">\n        <img\n            data-src=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\"\n            alt=\"Gzip Size\">\n    </a>\n    <a href=\"https://www.npmjs.com/package/dayjs\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"></a>\n    <a href=\"https://travis-ci.org/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\">\n        <img data-src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\">\n    </a>\n    <a href=\"https://codecov.io/gh/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\">\n        <img data-src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\">\n    </a>\n    <a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\" target=\"_blank\" rel=\"noopener\">\n        <img data-src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a>\n    <br>\n    <a href=\"https://saucelabs.com/u/dayjs\" target=\"_blank\" rel=\"noopener\">\n        <img width=\"750\" data-src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\">\n    </a>\n</p>\n\n<blockquote>\n<p>Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs()</span><br><span class=\"line\">  .startOf(<span class=\"string\">\"month\"</span>)</span><br><span class=\"line\">  .add(<span class=\"number\">1</span>, <span class=\"string\">\"day\"</span>)</span><br><span class=\"line\">  .set(<span class=\"string\">\"year\"</span>, <span class=\"number\">2018</span>)</span><br><span class=\"line\">  .format(<span class=\"string\">\"YYYY-MM-DD HH:mm:ss\"</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>🕒 和 Moment.js 相同的 API 和用法</li>\n<li>💪 不可变数据 (Immutable)</li>\n<li>🔥 支持链式操作 (Chainable)</li>\n<li>🌐 国际化 I18n</li>\n<li>📦 仅 2kb 大小的微型库</li>\n<li>👫 全浏览器兼容</li>\n</ul>\n<hr>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install dayjs --save</span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./Installation.md\">安装指南</a></p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Day.js 有很多 API 来解析、处理、校验、增减、展示时间和日期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs(<span class=\"string\">\"2018-08-08\"</span>); <span class=\"comment\">// 解析</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">\"&#123;YYYY&#125; MM-DDTHH:mm:ss SSS [Z] A\"</span>); <span class=\"comment\">// 展示</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs()</span><br><span class=\"line\">  .set(<span class=\"string\">\"month\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  .month(); <span class=\"comment\">// 获取</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().add(<span class=\"number\">1</span>, <span class=\"string\">\"year\"</span>); <span class=\"comment\">// 处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().isBefore(dayjs()); <span class=\"comment\">// 查询</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./API-reference.md\">API 参考</a></p>\n<h3 id=\"国际化-I18n\"><a href=\"#国际化-I18n\" class=\"headerlink\" title=\"国际化 I18n\"></a>国际化 I18n</h3><p>Day.js 支持国际化</p>\n<p>但除非手动加载，多国语言默认是不会被打包到工程里的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"dayjs/locale/es\"</span>; <span class=\"comment\">// 按需加载</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.locale(<span class=\"string\">\"es\"</span>); <span class=\"comment\">// 全局使用西班牙语</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs(<span class=\"string\">\"2018-05-05\"</span>)</span><br><span class=\"line\">  .locale(<span class=\"string\">\"zh-cn\"</span>)</span><br><span class=\"line\">  .format(); <span class=\"comment\">// 在这个实例上使用简体中文</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./I18n.md\">国际化 I18n</a></p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> advancedFormat <span class=\"keyword\">from</span> <span class=\"string\">\"dayjs/plugin/advancedFormat\"</span>; <span class=\"comment\">// 按需加载插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.extend(advancedFormat); <span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">\"Q Do k kk X x\"</span>); <span class=\"comment\">// 使用扩展后的API</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./Plugin.md\">插件列表</a></p>\n<h2 id=\"开源协议\"><a href=\"#开源协议\" class=\"headerlink\" title=\"开源协议\"></a>开源协议</h2><p>Day.js 遵循 <a href=\"../../LICENSE\">MIT 开源协议</a>.</p>\n","updated":"2020-04-07T14:39:33.067Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/DayJs/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"JS时间处理","slug":"JS时间处理","permalink":"https://js-mark.com/tags/JS%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"}]},{"title":"Vue二维码组件","date":"2018-03-12T08:30:00.000Z","path":"Vue/vueqr-new/","content":"<h1 id=\"vue-components\"><a href=\"#vue-components\" class=\"headerlink\" title=\"vue components\"></a>vue components</h1><p><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://github.com/Jack-In/vueQr-new/master/license\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a></p>\n<blockquote>\n<h3 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a>快速安装</h3></blockquote>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>快速添加 <code>vueqr-new</code> 组件到 app 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vueqr-new</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vue-qr</span> <span class=\"attr\">:config</span>=<span class=\"string\">\"config\"</span> <span class=\"attr\">:text</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">vue-qr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> vueQr <span class=\"keyword\">from</span> <span class=\"string\">'vueqr-new'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">const</span> config = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 容错等级</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  errorCorrectionLevel: <span class=\"string\">'H'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 图片类型</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  type: <span class=\"string\">'image/png'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  rendererOpts: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  quality: 0.3</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 边框与二维码之间的间距</span></span></span><br><span class=\"line\"><span class=\"undefined\">  margin: 0,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 缩放倍数</span></span></span><br><span class=\"line\"><span class=\"undefined\">  scale: 4,</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 500,</span></span><br><span class=\"line\"><span class=\"undefined\">  maskPattern:1,</span></span><br><span class=\"line\"><span class=\"undefined\">  color: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  dark: <span class=\"string\">'#000000'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  light : <span class=\"string\">\"#ffffff\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  style: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  width: <span class=\"string\">'128px'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  border: <span class=\"string\">'1px solid #ccc'</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      text: <span class=\"string\">'https://example.com'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      config: config</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    vueQr</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Component-props\"><a href=\"#Component-props\" class=\"headerlink\" title=\"Component props\"></a>Component props</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>属性描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>config</td>\n<td>Object</td>\n<td>qrcode option</td>\n</tr>\n<tr>\n<td>text</td>\n<td>String</td>\n<td>qrcode value</td>\n</tr>\n</tbody></table>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3pwYW8vcXJjb2RlLnJlYWN0\">“node-qrcode”<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3></blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phY2stSW4vdnVlUXItbmV3L2Jsb2IvbWFzdGVyL0xJQ0VOU0U=\">MIT<i class=\"fa fa-external-link-alt\"></i></span></p>\n","updated":"2020-04-07T14:40:19.406Z","comments":true,"link":"","permalink":"https://js-mark.com/Vue/vueqr-new/","categories":[{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/categories/Vue/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/tags/Vue/"}]},{"title":"Vuex 状态管理插件学习","date":"2018-03-12T08:16:16.000Z","path":"Vue/Vuex/","content":"<h1 id=\"Vue-状态管理插件学习\"><a href=\"#Vue-状态管理插件学习\" class=\"headerlink\" title=\"Vue 状态管理插件学习\"></a>Vue 状态管理插件学习</h1><ul>\n<li><p>vuex vue 提供的数据状态管理插件（俗称数据共享中心）</p>\n</li>\n<li><p>state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）</p>\n</li>\n<li><p>获取仓库中定义值的方法</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;&#123;$store.state.定义的属性&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用计算属性</span></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tcount()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.定义的属性</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6写法</span></span><br><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>等同于</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.count</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>4.mapState 扩展使用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([<span class=\"string\">'在state中定义的属性'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 这个会根据你定义的属性名绑定到vue实例上</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>5.mutations 提交更改仓库中定义值的方法（修改状态）</li>\n<li>使用$store.commit(‘调用定义在 mutations 中定义的方法名’，要传递给调用方法的参数)</li>\n<li>获取状态管理器中定义的方法(mutations)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个加的方法</span></span><br><span class=\"line\">\tadd(state) &#123;</span><br><span class=\"line\">\t\tstate.count++</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个减的方法</span></span><br><span class=\"line\">\treduce(state) &#123;</span><br><span class=\"line\">\t\tstate.count--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">// 在vue中使用import导入辅助函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState, mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: mapMutations([<span class=\"string\">'add'</span>, <span class=\"string\">'reduce'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">methods: mapMutations([(countAdd: <span class=\"string\">'add'</span>), (countReauce: <span class=\"string\">'reduce'</span>)])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>6.vuex 中的计算属性（过滤属性）getters</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  count:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 或者</span></span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState,mapMutations,mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">computed: mapGetters(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>7.vuex 中的 actions，异步提交方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// context：上下文对象，这里你可以理解称store本身。</span></span><br><span class=\"line\">\taddAction(context) &#123;</span><br><span class=\"line\">\t\tcontext.commit(<span class=\"string\">'add'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;commit&#125;：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。</span></span><br><span class=\"line\">\treduceAction(&#123; commit &#125;) &#123;</span><br><span class=\"line\">\t\tcommit(<span class=\"string\">'reduce'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>8.module 模块组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleA=&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">modules: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//模块别名:模块名，记得要使用import引入模块</span></span><br><span class=\"line\">\ta:moduleA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用模块值和方法</span></span><br><span class=\"line\">和以上的使用方法一样，只不过前边加一个模块别名</span><br></pre></td></tr></table></figure>\n","updated":"2020-04-07T14:40:22.765Z","comments":true,"link":"","permalink":"https://js-mark.com/Vue/Vuex/","categories":[{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/categories/Vue/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://js-mark.com/tags/JS/"},{"name":"vue","slug":"vue","permalink":"https://js-mark.com/tags/vue/"},{"name":"vuex","slug":"vuex","permalink":"https://js-mark.com/tags/vuex/"}]},{"title":"Typora For Markdown 语法","date":"2018-03-11T16:00:00.000Z","path":"软件工具/typora/","content":"<p>#Typora For Markdown 语法</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3hpYW5iYWkubWUvbGVhcm4tbWQvaW5kZXguaHRtbA==\">Learning-Markdown (Markdown 入门参考)<i class=\"fa fa-external-link-alt\"></i></span><br>[TOC]</p>\n<p>###数学表达式</p>\n<p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹 Tex 命令，例如：<code>$lim_{x \\to \\infty} \\ exp(-x)=0$</code>将产生如下的数学表达式：</p>\n<p>$\\lim_{x \\to \\infty} \\exp(-x)=0$</p>\n<a id=\"more\"></a>\n<p>###下标</p>\n<p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生 H<del>2</del>O, 即水的分子式。</p>\n<p>###上标</p>\n<p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式 y^2^ = 4</p>\n<p>###插入表情:happy:</p>\n<p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>用 HTML 的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>GFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>使用`包裹的内容将会以代码样式显示，例如</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用`printf()`</span><br></pre></td></tr></table></figure>\n\n<p>则会产生<code>printf()</code>样式。</p>\n<ul>\n<li><p>输入<code>~~~</code>或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：</p>\n</li>\n<li><pre><code>​```java\npublic Class HelloWorld{\n  System.out.println(&quot;Hello World!&quot;);\n}\n​```\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">将会产生</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">public Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(&quot;Hello World!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n### 强调\n\n使用两个\\*号或者两个\\_包裹的内容将会被强调。例如\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**使用两个*号强调内容**</span></span><br><span class=\"line\"><span class=\"strong\">__使用两个下划线强调内容__</span></span><br></pre></td></tr></table></figure>\n\n将会输出\n\n**使用两个\\*号强调内容**\n**使用两个下划线强调内容**\nTyproa 推荐使用两个\\*号。\n\n### 斜体\n\n在标准的 Markdown 语法中，\\*和\\_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：\n\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\\*</span></span><br></pre></td></tr></table></figure>\n\n### 插入图片\n\n我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。\n\n![drag and drop image](http://typora.io/img/drag-img.gif)\n\n​\n\n​\n</code></pre></li>\n</ul>\n<h3 id=\"插入-URL-连接\"><a href=\"#插入-URL-连接\" class=\"headerlink\" title=\"插入 URL 连接\"></a>插入 URL 连接</h3><p>使用尖括号包裹的 url 将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:&lt;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20mZ3Q7\">www.baidu.com&gt;<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<p>如果是标准的 url，则会自动产生连接，例如:<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"目录列表-Table-of-Contents（TOC）\"><a href=\"#目录列表-Table-of-Contents（TOC）\" class=\"headerlink\" title=\"目录列表 Table of Contents（TOC）\"></a>目录列表 Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p>\n<h3 id=\"水平分割线\"><a href=\"#水平分割线\" class=\"headerlink\" title=\"水平分割线\"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p>\n<hr>\n<h3 id=\"标注\"><a href=\"#标注\" class=\"headerlink\" title=\"标注\"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某些人用过了才知道<span class=\"selector-attr\">[^注释]</span></span><br><span class=\"line\"><span class=\"selector-attr\">[^注释]</span><span class=\"selector-pseudo\">:Somebody</span> <span class=\"selector-tag\">that</span> <span class=\"selector-tag\">I</span> <span class=\"selector-tag\">used</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">know</span>.</span><br></pre></td></tr></table></figure>\n\n<p>将产生：</p>\n<p>某些人用过了才知道[^注释]<br>[^注释]: Somebody that I used to know.</p>\n<p>把鼠标放在<code>注释</code>上，将会有提示内容。</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">|姓名|</span>性别<span class=\"params\">|毕业学校|</span>工资<span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span><span class=\"symbol\">:---|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|---</span><span class=\"symbol\">:|</span></span><br><span class=\"line\"><span class=\"params\">|杨洋|</span>男<span class=\"params\">|重庆交通大学|</span><span class=\"number\">3200</span><span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span>峰哥<span class=\"params\">|男|</span>贵州大学<span class=\"params\">|5000|</span></span><br><span class=\"line\"><span class=\"params\">|坑货|</span>女<span class=\"params\">|北京大学|</span><span class=\"number\">2000</span><span class=\"params\">|</span></span><br></pre></td></tr></table></figure>\n\n<p>将产生:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">姓名</th>\n<th align=\"center\">性别</th>\n<th align=\"center\">毕业学校</th>\n<th align=\"right\">工资</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">杨洋</td>\n<td align=\"center\">男</td>\n<td align=\"center\">重庆交通大学</td>\n<td align=\"right\">3200</td>\n</tr>\n<tr>\n<td align=\"left\">峰哥</td>\n<td align=\"center\">男</td>\n<td align=\"center\">贵州大学</td>\n<td align=\"right\">5000</td>\n</tr>\n<tr>\n<td align=\"left\">坑货</td>\n<td align=\"center\">女</td>\n<td align=\"center\">北京大学</td>\n<td align=\"right\">2000</td>\n</tr>\n</tbody></table>\n<p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p>\n<h3 id=\"数学表达式块\"><a href=\"#数学表达式块\" class=\"headerlink\" title=\"数学表达式块\"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"formula\">$$<span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_1 <span class=\"tag\">\\<span class=\"name\">times</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_2 =  <span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;vmatrix&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;i&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;j&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;k&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;vmatrix&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>\n\n<p>将会产生:</p>\n<p>$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}$$</p>\n<h3 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">[ ]</span> 吃饭</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 逛街</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 看电影</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 约泡</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>吃饭</p>\n<pre><code>​</code></pre></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>逛街</p>\n<pre><code>​</code></pre></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>看电影</p>\n<pre><code>​</code></pre></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>约泡</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"strong\">*无序的列表*</span><span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> tfboys</span><br><span class=\"line\"><span class=\"bullet\">* </span>杨洋</span><br><span class=\"line\"><span class=\"bullet\">* </span>我爱你</span><br></pre></td></tr></table></figure>\n\n<p><strong>无序的列表</strong></p>\n<ul>\n<li>tfboys</li>\n<li>杨洋</li>\n<li>我爱你</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**有序的列表**</span></span><br><span class=\"line\"><span class=\"bullet\">1. </span>苹果</span><br><span class=\"line\"><span class=\"bullet\">6. </span>香蕉</span><br><span class=\"line\"><span class=\"bullet\">10. </span>我都不喜欢</span><br></pre></td></tr></table></figure>\n\n<p><strong>有序的列表</strong></p>\n<ol>\n<li>苹果</li>\n<li>香蕉</li>\n<li>我都不喜欢</li>\n</ol>\n<h3 id=\"块引用\"><a href=\"#块引用\" class=\"headerlink\" title=\"块引用\"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">这是一个块引用！</span></span><br></pre></td></tr></table></figure>\n\n<p>将产生：</p>\n<blockquote>\n<p>这是一个块引用！</p>\n</blockquote>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。</p>\n","updated":"2020-04-07T14:40:08.278Z","comments":true,"link":"","permalink":"https://js-mark.com/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/typora/","categories":[{"name":"软件工具","slug":"软件工具","permalink":"https://js-mark.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"Markdown","slug":"Markdown","permalink":"https://js-mark.com/tags/Markdown/"}]},{"title":"Webpack打包工具总结","date":"2017-12-28T17:01:16.000Z","path":"JavaScript/Webpack/","content":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><ul>\n<li>安装 webpack</li>\n<li>配置 webpack.config.js<blockquote>\n<p>官方教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2Mud2VicGFjay1jaGluYS5vcmcvY29uZmlndXJhdGlvbi8jLQ==\">https://doc.webpack-china.org/configuration/#-<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: <span class=\"string\">'./foo.js'</span>,</span><br><span class=\"line\">\t\toutput: &#123;</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'foo.bundle.js'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:</span><br><span class=\"line\">\t\trules: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">\t\t\t\tuse: <span class=\"string\">'babel-loader'</span>，</span><br><span class=\"line\">\t\t\t\tinclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\texclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app/demo-files\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// test 和 include 具有相同的作用，都是必须匹配选项</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// exclude 是必不匹配选项（优先于 test 和 include）</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 最佳实践：</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 只在 test 和 文件名匹配 中使用正则表达式</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 在 include 和 exclude 中使用绝对路径数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 尽量避免 exclude，更倾向于使用 include</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> (webpack.optimize.UglifyJsPlugin)</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(template: <span class=\"string\">'./src/index.html'</span>)</span><br><span class=\"line\">\t  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,</li>\n<li>Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：<br>在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm install --save-dev html-webpack-plugin</span></span><br><span class=\"line\"><span class=\"comment\">// 在webpack.config.js中配置：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">\t\tprint: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> cleanWebpackPlugin([<span class=\"string\">'dist'</span>]), <span class=\"comment\">//数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\t\t\ttitle: <span class=\"string\">'页面标题'</span>, <span class=\"comment\">//生成页面标题</span></span><br><span class=\"line\">\t\t\tfilename: <span class=\"string\">'index.html'</span>, <span class=\"comment\">//要生成的文件名</span></span><br><span class=\"line\">\t\t\ttemplate: <span class=\"string\">'index.html'</span> <span class=\"comment\">//要生成页面的时候的模板</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput: &#123;</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JSon 文件中不能以有注释</li>\n<li>使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm run dev</span></span><br><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm start</span></span><br><span class=\"line\"><span class=\"comment\">// 如果键名是start，可以省略写run</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,<span class=\"comment\">//忽略目录</span></span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！</li>\n<li>解析文件的话，要去下载各种文件类型的 loader</li>\n<li>webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了</li>\n<li>package.json 对象中最后一个参数项，不能书写逗号</li>\n</ul>\n<h3 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3><ul>\n<li>（command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思</li>\n<li>vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具</li>\n</ul>\n<h3 id=\"打包的工程目录中-src-源码所在文件，dist-发布的目录\"><a href=\"#打包的工程目录中-src-源码所在文件，dist-发布的目录\" class=\"headerlink\" title=\"打包的工程目录中 src 源码所在文件，dist 发布的目录\"></a>打包的工程目录中 src 源码所在文件，dist 发布的目录</h3>","updated":"2020-04-07T14:40:28.266Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/Webpack/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://js-mark.com/tags/JS/"},{"name":"Webpack3.10","slug":"Webpack3-10","permalink":"https://js-mark.com/tags/Webpack3-10/"},{"name":"语法","slug":"语法","permalink":"https://js-mark.com/tags/%E8%AF%AD%E6%B3%95/"}]},{"title":"JavaScript模块化语法总结","date":"2017-12-28T16:28:16.000Z","path":"JavaScript/JavaScript-modules/","content":"<h1 id=\"CommonJS-服务端模块化规范\"><a href=\"#CommonJS-服务端模块化规范\" class=\"headerlink\" title=\"CommonJS 服务端模块化规范\"></a>CommonJS 服务端模块化规范</h1><h1 id=\"AMD-CMD-浏览器（客户端）模块化规范\"><a href=\"#AMD-CMD-浏览器（客户端）模块化规范\" class=\"headerlink\" title=\"AMD/CMD 浏览器（客户端）模块化规范\"></a>AMD/CMD 浏览器（客户端）模块化规范</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">\"math\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>\n<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p>\n<h3 id=\"AMD-规范的模块化插件（require-js-和-curl-js）\"><a href=\"#AMD-规范的模块化插件（require-js-和-curl-js）\" class=\"headerlink\" title=\"AMD 规范的模块化插件（require.js 和 curl.js）\"></a>AMD 规范的模块化插件（require.js 和 curl.js）</h3><p>使用的是 require 导入模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>, <span class=\"string\">'backbone'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _, Backbone</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"comment\">// some code here</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">       baseUrl:<span class=\"string\">'js/lib'</span>,<span class=\"comment\">//放置公共路径</span></span><br><span class=\"line\">　　　　paths: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　<span class=\"string\">\"jquery\"</span>: <span class=\"string\">\"jquery.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"underscore\"</span>: <span class=\"string\">\"underscore.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"backbone\"</span>: <span class=\"string\">\"backbone.min\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AMD-模块规范写法\"><a href=\"#AMD-模块规范写法\" class=\"headerlink\" title=\"AMD 模块规范写法\"></a>AMD 模块规范写法</h3><ul>\n<li>五、AMD 模块的写法</li>\n</ul>\n<p>require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。</p>\n<p>具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在<code>define()</code>函数之中。</p>\n<p>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    add: add</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;); <span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载方法如下：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"math\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">math</span>) </span>&#123;</span><br><span class=\"line\">  alert(math.add(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","updated":"2020-04-07T14:39:45.436Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/JavaScript-modules/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"模块化","slug":"模块化","permalink":"https://js-mark.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"},{"name":"规范","slug":"规范","permalink":"https://js-mark.com/tags/%E8%A7%84%E8%8C%83/"},{"name":"JS","slug":"JS","permalink":"https://js-mark.com/tags/JS/"}]},{"title":"ES5, ES6, ES2016, ES.Next: JavaScript的版本是怎么回事？「译」","date":"2015-09-21T16:00:00.000Z","path":"JavaScript/JavaScript的版本是怎么回事/","content":"<p>JavaScript 有着很奇怪的命名史。</p>\n<p>1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript <em>（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）</em></p>\n<a id=\"more\"></a>\n<p><img data-src=\"/assets/img/2015/09/javascript-java.jpg\" alt=\"java-javascript\"><br><small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small></p>\n<blockquote>\n<p>译者注：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmF2YVNjcmlwdCNIaXN0b3J5\">wikipedia 的 JavaScript 词条<i class=\"fa fa-external-link-alt\"></i></span> 更详细的叙述了这段历史</p>\n</blockquote>\n<p>1996 年，网景将 JavaScript 提交给 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnLw==\">ECMA International（欧洲计算机制造商协会）<i class=\"fa fa-external-link-alt\"></i></span> 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。</p>\n<blockquote>\n<p>术语（译者注）：</p>\n<ul>\n<li>_标准（Standard）_： 用于定义与其他事物区别的一套规则</li>\n<li>_实现（Implementation）_： 某个标准的具体实施/真实实践</li>\n</ul>\n</blockquote>\n<p>不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。</p>\n<blockquote>\n<p>译者注：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRUNNQVNjcmlwdCM0dGhfRWRpdGlvbl8uMjhhYmFuZG9uZWQuMjk=\">ECMAScript 第四版草案<i class=\"fa fa-external-link-alt\"></i></span>由于太过激进而被抛弃，Adobe 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQWN0aW9uU2NyaXB0\">ActionScript 3.0<i class=\"fa fa-external-link-alt\"></i></span> 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）</p>\n</blockquote>\n<p>到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）</p>\n<p>目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3d5Y2F0cy9qYXZhc2NyaXB0LWRlY29yYXRvcnM=\">decorators（装饰者）<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2x1a2Vob2Jhbi9lY21hc2NyaXB0LWFzeW5jYXdhaXQ=\">async-await（async-await 异步编程模型）<i class=\"fa fa-external-link-alt\"></i></span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plZmZtby9lcy1jbGFzcy1wcm9wZXJ0aWVz\">static class properties（静态类属性）<i class=\"fa fa-external-link-alt\"></i></span>。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvdXNhZ2UvZXhwZXJpbWVudGFsLw==\">Babel 的官网<i class=\"fa fa-external-link-alt\"></i></span> 上查看各个提案目前都在哪个阶段了。</p>\n<p>所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：</p>\n<ul>\n<li><strong>ECMAScript</strong>：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>\n<li><strong>JavaScript</strong>：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>\n<li><strong>ECMAScript 5 (ES5)</strong>：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>\n<li><strong>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)</strong>：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<span class=\"exturl\" data-url=\"aHR0cDovL2thbmdheC5naXRodWIuaW8vY29tcGF0LXRhYmxlL2VzNi8=\">这张兼容性表<i class=\"fa fa-external-link-alt\"></i></span>来查看不同浏览器和工具的实现情况。</li>\n<li><strong>ECMAScript 2016</strong>：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定</li>\n<li><strong>ECMAScript Proposals</strong>：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>\n</ul>\n<p>在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。</p>\n<h4 id=\"一些资源\"><a href=\"#一些资源\" class=\"headerlink\" title=\"一些资源\"></a>一些资源</h4><ul>\n<li>TC39 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYTI2Mg==\">Github 仓库<i class=\"fa fa-external-link-alt\"></i></span>上可以看到所有目前公开的提案</li>\n<li>如果你还不熟悉 ES6，Babel 有一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvbGVhcm4tZXMyMDE1Lw==\">很不错的特性概览<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 <span class=\"exturl\" data-url=\"aHR0cDovL2V4cGxvcmluZ2pzLmNvbS8=\">Exploring ES6<i class=\"fa fa-external-link-alt\"></i></span>和 Nicholas Zakas 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFucHViLmNvbS91bmRlcnN0YW5kaW5nZXM2\">Understanding ECMAScript 6<i class=\"fa fa-external-link-alt\"></i></span>。Axel 的博客 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4yYWxpdHkuY29tLw==\">2ality<i class=\"fa fa-external-link-alt\"></i></span> 也是很不错的 ES6 资源</li>\n</ul>\n<img class=\"shadow\" width=\"320\" data-src=\"/assets/img/2015/09/keep-calm-and-learn-javascript.png\" />\n<small class=\"img-hint\">来学 JavaScript 吧！</small>\n\n<h4 id=\"著作权声明\"><a href=\"#著作权声明\" class=\"headerlink\" title=\"著作权声明\"></a>著作权声明</h4><p>本文译自 <span class=\"exturl\" data-url=\"aHR0cDovL2Jlbm1jY29ybWljay5vcmcvMjAxNS8wOS8xNC9lczUtZXM2LWVzMjAxNi1lcy1uZXh0LXdoYXRzLWdvaW5nLW9uLXdpdGgtamF2YXNjcmlwdC12ZXJzaW9uaW5nLw==\">ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?<i class=\"fa fa-external-link-alt\"></i></span><br>译者 <span class=\"exturl\" data-url=\"aHR0cDovL3dlaWJvLmNvbS9odXhwcm8=\">黄玄<i class=\"fa fa-external-link-alt\"></i></span>，首次发布于 <span class=\"exturl\" data-url=\"aHR0cDovL2h1YW5neHVhbi5tZQ==\">Hux Blog<i class=\"fa fa-external-link-alt\"></i></span>，转载请保留以上链接</p>\n","updated":"2020-04-07T14:39:49.933Z","comments":true,"link":"","permalink":"https://js-mark.com/JavaScript/JavaScript%E7%9A%84%E7%89%88%E6%9C%AC%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B/","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"翻译","slug":"翻译","permalink":"https://js-mark.com/tags/%E7%BF%BB%E8%AF%91/"}]}],"categories":[{"name":"git操作","slug":"git操作","permalink":"https://js-mark.com/categories/git%E6%93%8D%E4%BD%9C/"},{"name":"前端面试","slug":"前端面试","permalink":"https://js-mark.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"},{"name":"Mac","slug":"Mac","permalink":"https://js-mark.com/categories/Mac/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/categories/JavaScript/"},{"name":"网络传输协议","slug":"网络传输协议","permalink":"https://js-mark.com/categories/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"},{"name":"系统","slug":"系统","permalink":"https://js-mark.com/categories/%E7%B3%BB%E7%BB%9F/"},{"name":"系统命令","slug":"系统命令","permalink":"https://js-mark.com/categories/%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/"},{"name":"网站应用","slug":"网站应用","permalink":"https://js-mark.com/categories/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8/"},{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/categories/Vue/"},{"name":"软件工具","slug":"软件工具","permalink":"https://js-mark.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"前端开发","slug":"前端开发","permalink":"https://js-mark.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"sourceTree","slug":"sourceTree","permalink":"https://js-mark.com/tags/sourceTree/"},{"name":"git","slug":"git","permalink":"https://js-mark.com/tags/git/"},{"name":"面试题","slug":"面试题","permalink":"https://js-mark.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"name":"Javascript","slug":"Javascript","permalink":"https://js-mark.com/tags/Javascript/"},{"name":"Mac","slug":"Mac","permalink":"https://js-mark.com/tags/Mac/"},{"name":"软件","slug":"软件","permalink":"https://js-mark.com/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"stylus","slug":"stylus","permalink":"https://js-mark.com/tags/stylus/"},{"name":"css","slug":"css","permalink":"https://js-mark.com/tags/css/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://js-mark.com/tags/JavaScript/"},{"name":"NPM","slug":"NPM","permalink":"https://js-mark.com/tags/NPM/"},{"name":"NodeJs","slug":"NodeJs","permalink":"https://js-mark.com/tags/NodeJs/"},{"name":"ES6语法","slug":"ES6语法","permalink":"https://js-mark.com/tags/ES6%E8%AF%AD%E6%B3%95/"},{"name":"网络传输协议","slug":"网络传输协议","permalink":"https://js-mark.com/tags/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"},{"name":"TCP/IP协议族","slug":"TCP-IP协议族","permalink":"https://js-mark.com/tags/TCP-IP%E5%8D%8F%E8%AE%AE%E6%97%8F/"},{"name":"HTTP/HTTPS","slug":"HTTP-HTTPS","permalink":"https://js-mark.com/tags/HTTP-HTTPS/"},{"name":"windows","slug":"windows","permalink":"https://js-mark.com/tags/windows/"},{"name":"linux","slug":"linux","permalink":"https://js-mark.com/tags/linux/"},{"name":"VSCode","slug":"VSCode","permalink":"https://js-mark.com/tags/VSCode/"},{"name":"系统底层","slug":"系统底层","permalink":"https://js-mark.com/tags/%E7%B3%BB%E7%BB%9F%E5%BA%95%E5%B1%82/"},{"name":"Shell","slug":"Shell","permalink":"https://js-mark.com/tags/Shell/"},{"name":"脚本操作","slug":"脚本操作","permalink":"https://js-mark.com/tags/%E8%84%9A%E6%9C%AC%E6%93%8D%E4%BD%9C/"},{"name":"Markdown","slug":"Markdown","permalink":"https://js-mark.com/tags/Markdown/"},{"name":"掘金","slug":"掘金","permalink":"https://js-mark.com/tags/%E6%8E%98%E9%87%91/"},{"name":"Vue","slug":"Vue","permalink":"https://js-mark.com/tags/Vue/"},{"name":"ESLint","slug":"ESLint","permalink":"https://js-mark.com/tags/ESLint/"},{"name":"JS时间处理","slug":"JS时间处理","permalink":"https://js-mark.com/tags/JS%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"},{"name":"JS","slug":"JS","permalink":"https://js-mark.com/tags/JS/"},{"name":"vue","slug":"vue","permalink":"https://js-mark.com/tags/vue/"},{"name":"vuex","slug":"vuex","permalink":"https://js-mark.com/tags/vuex/"},{"name":"Webpack3.10","slug":"Webpack3-10","permalink":"https://js-mark.com/tags/Webpack3-10/"},{"name":"语法","slug":"语法","permalink":"https://js-mark.com/tags/%E8%AF%AD%E6%B3%95/"},{"name":"模块化","slug":"模块化","permalink":"https://js-mark.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"},{"name":"规范","slug":"规范","permalink":"https://js-mark.com/tags/%E8%A7%84%E8%8C%83/"},{"name":"翻译","slug":"翻译","permalink":"https://js-mark.com/tags/%E7%BF%BB%E8%AF%91/"}]}